[
["index.html", "Preface", " Preface This online book is serving as a study guide for students in my data journalism classes at the Cronkite School of Journalism. As we’re learning, there are a lot of moving pieces and this serves to put it all together in one place. I’m grateful for all of the experts and teachers out there who have made their training materials open to the world, and helped build a wealth of materials for students of all types. "],
["r-an-r-studio-tour.html", "Chapter1 R an R Studio tour 1.1 Key takeaways 1.2 Why program? 1.3 Setting up R and R Studio 1.4 Resources and exercises", " Chapter1 R an R Studio tour “In every project you have at least one other collaborator: future-you. You don’t want future-you to curse past-you.” - Hadley Wickham 1.1 Key takeaways How to get access to R and R Studio either in the cloud or on your own computer, or both R is a programming language, and R Studio is a way of interacting with the programming language What the Console is How to create a variable from scratch, including a vector (list), a number, or text How to install a package and how to invoke it 1.2 Why program? All programming languages have one thing in common: You write instructions, called algorithms, and the program executes your statements in order. You might need to use a mouse, but the instructions are done without much interaction on your part. It means you can do more complicated work in computer programming than in point-and-click parts of Excel. It can also scale – you can repeat your instructions millions of times, tweak it a little, and re-run the program without messing anything else up. Some common programming languages used in journalism are: Structured Query Language, or SQL. We usually teach data journalism using this language, which is the standard language for creating, updating and querying very large and complicated databases in business. Banks run on SQL. So do human resources departments. You should know it exists, and you may even want to learn it at some point. The basics are easy. But the main functions that we use in SQL are available in R: filtering, grouping, sorting and joining are all implemented in R. Python and some frameworks to work with it. Python is a relatively simple program to use, is very intuitive, and is in widespread use throughout industry and on the business side of journalism organizations. It’s much easier to scrape a website with Python than with R. It’s also well-suited to building entire data-driven websites, through the use of frameworks. (Two examples are Django and Flask) Ruby and the framework called Rails. Ruby is best known as a language suited for building responsive Web sites. 1.2.1 Why R? It’s become the de facto tool for statistical and data analysis in many newsrooms and in academic settings. (Python remains popular for corporate and production-related uses.) Some news data teams will not consider an intern who has had zero experience with R. It doesn’t need to be a lot, but some familiarity is required or highly valued. There is an enormous user base. The only trick is to search on “RStats” rather than R when you’re looking for answers. It has some of the most robust exploratory graphics. It is free. As in beer and as in speech. 1.3 Setting up R and R Studio 1.3.1 RStudio Cloud The easiest way to get set up in R is to open a free account on RStudio Cloud It runs just the way it works on your laptop, but can be a little slow. Just be sure to save often , as it’s easy to forget to save your code, and it can crash every once in a while. If you use very large files – usually files that contain images or maps – you may outpace your allocated workspace, but by then you should be more comfortable with the platform. 1.3.2 Install yourself If you want to install on your laptop, try these steps. 1.3.2.1 MAC USERS: Install command line tools for Mac** This is a pain, but it only has to happen once. There are some things that won’t work if you skip this step. In your terminal (found under Utilities in the Applications folder), type: xcode-select --install You’ll get an error message saying that it can’t be done because you don’t have command line tools, and would you like to install them now? Say yes. Once it’s done, just close out your terminal. You never really wanted the thing that you asked to install in the first place. 1.3.2.2 EVERYONE Install R for your computer. Use the most recent binaries for your operating system. Install R Studio Desktop for your computer ONLY AFTER YOU HAVE INSTALLED R. Use the free community version. 1.3.3 An R Studio tour We’ll be interacting with R using R Studio, which is a simple way to see all of the different pieces of any project. 1.3.4 The Console The Console is where you can type commands. Try it. console 5+5 #when you type this [1] 10 #this is what you get back &quot;Sarah&quot; #when you type this [1] &quot;Sarah&quot; #this is what you get back The console just gives you the answer from your latest command. We will do very little in the console, but it’s a good place to test little commands that you aren’t sure of. 1.3.5 Packages Packages in R are just what they sound like – packages of programs that users have found useful to extend the base R language. R is almost useless without them. As a general rule of thumb: Install packages using the console. They must be installed once on every computer, or in every project when you use RStudio Cloud. Then activate them using the library() command in your program. For this class, the packages you must have installed are: install.packages(&quot;tidyverse&quot;) install.packages(&quot;rmarkdown&quot;) For a first look at R, we’ll want to install the Swirl package as well: install.packages(&quot;swirl&quot;) 1.3.6 Work in projects The easiest way to keep yourself organized is to work in R Studio projects rather than individual files. This means you don’t have to worry about what directories or folders your computer thinks you are using at any one time, and creates a compact package. If you’re using RStudio.cloud, every project is already self-contained. Instead of creating a new file when you start R, create a new project, and tell R where to put the directory when prompted. Then, when you want to return to the project, open the project rather than a file: save as 1.3.7 Error messages The hardeset part of R is getting used to the error messages. Here’s an example: 5 + &quot;three&quot; ## Error in 5 + &quot;three&quot;: non-numeric argument to binary operator This is saying that you’re trying to use a number and text in the same phrase. When you get into R Markdown documents, you’ll see a few other common errors and ways to troubleshoot them. For now, you can Google the specific error message (“non-numeric argument …”) . Be sure if you ask for help to describe What you were trying to do The code you used to do it. The specific error message. 1.4 Resources and exercises 1.4.1 Take the swirl() tutorial If you haven’t done it already, install the swirl() package, and activate it using the library(swirl) command. Do this in the Console: install.packages(&quot;swirl&quot;) Once it’s installed, you need to activate the package and invoke the program every time you want to use it in a new session: library(swirl) swirl() Then just follow the prompts. Don’t worry that they’re red – it doesn’t mean there’s anything wrong. It’s just trying to distinguish what you typed from what it replied. You only want the first chapterl, “1: R Programming: The basics of programming in R”, then just the first lesson, called “Basic Building Blocks”. At the end, just hit the escape key. 1.4.2 Programming concepts The Intro to coding from our course website. The Data types and tidy data section of our Excel training. \"Beyond Binary, Lesson 1 from a Google engineer’s drag queen persona named Anna Lytical. This video gives you a good handle on what a computer program does. 1.4.3 R and R Studio Introduction and “Getting started” chapters of Sharon Machlis’ Practical R for Mass Communications and Journalism "],
["r-markdown.html", "Chapter2 R Markdown 2.1 Key takeaways 2.2 Understanding Markdown 2.3 Resources", " Chapter2 R Markdown All of the work we do in class will be done through R Notebooks, which is one of the options when you create a new file. 2.1 Key takeaways Basic markdown syntax of headings and bulleted items Converting markdown into a readable page using Preview or Knit Adding and running code chunks 2.2 Understanding Markdown Markdown is a language that was developed to make writing simple Web pages faster and easier. Instead of coding tags, authors could use simple punctuation. This book is written using Markdown. It was created for wikis, notably Wikipedia, when it became clear that having to learn HTML as a language was a barrier to participation. Now it’s used for all kinds of static web sites hosted on Github and elsewhere. In R, Markdown is implemented in two ways: An R Notebook and and R Markdown document. There are a few subtle differences, but for now don’t worry what they are. Just use R Notebooks for now. You must install the rmarkdown package before you can use this feature. install.packages(&quot;rmarkdown&quot;) It’s automatically loaded when you start up R Studio after it’s installed. When we worked in Excel, you had to keep a detailed diary of everything you did. Otherwise, you might not have been able to reproduce it, correct it, or even explain how you got to the end. In a markdown document is self-documenting. You write code and the description in the same place. This is the note to your future self. 2.2.1 Formatting in Markdown Markdown uses simple punctuation to create outline levels, lists, links and other elements of a page. This markdown tutorial from Adam Pritchard goes through the formatting rules. But, for example: ## Starting a line with ## and a space is the same as H2, or a 2nd level heading. * A blank line, then asterisk, then space starts a bulleted list * This would be the second row 2.2.2 Code chunks So far, this is just a simple document. It doesn’t contain any R code. To add code, you insert a “code chunk”. You can add it by clicking the +Insert button at the top of the document, or by pressing Option/Alt-Cmd-i Add your code in the gray area between the triple-backtic symbols. Run the code chunk by pressing the arrow button within it, or by pressing Cmd/Ctl-Shft-Enter (either Cmd or Ctl) Any line that starts with a hash mark within the code chunk is a comment, and will be ignored #create a variable called my_data, which is one plus one my_data &lt;- 1 + 1 #then print it out my_data ## [1] 2 gif WARNING: If you print or display a very large dataset this document will become very, very large and it will take down your computer. Try to avoid this. If you do it by mistake, delete the output and try again. 2.2.3 Viewing your document There are two choices for viewing your document in finished form: You can “knit” it, which will re-run all of the code chunks from the beginning; or you can “Preview” it, which shows you the state it’s in right now. If you want the ability to do both, be sure to have these two lines at the top of your document. The difference is whether you created an R Notebook (Preview) or an R Markdown document (knit), or both. To preview your work, choose the “Preview” or “Knit” button at the top of your program. You’ll notice new files created in your home directory – html files that were created from your code. preview 2.3 Resources RStudio has created a full tutorial for R Markdown Matt Waite’s University of Nebraska Sports Data journalism book chapter 2.3.1 Exercises and assignments Do the first lab from Jesse Lecy’s data science class at ASU: “My First Markdown Document” Do the lab, but include a code chunk that creates a variable. "],
["data-frames-and-the-tidyverse.html", "Chapter3 Data frames and the tidyverse 3.1 Key takeaways 3.2 Data frames 3.3 The tidyverse 3.4 Loading data", " Chapter3 Data frames and the tidyverse 3.1 Key takeaways How to install and activate a package in R Activate the tidyverse every time you start using library() command What a data frame is How to read simple data from the Web or from your computer in csv form How to look at the data in the viewer or look at the top or bottom of the file with a command. 3.2 Data frames A data frame is an R “object”, and is treated like any other variable. The difference is that it contains columns and rows, just like a spreadsheet. The best data frames follow the same tidy data principles that we went over in Excel: Each column contains one kind of information – race, sex, address, etc. Each row contains one example of each of those columns, all at the same unit of analysis. Each data frame contains different levels or types of information. 3.3 The tidyverse Almost everything we do in R will be done through what’s known as the tidyverse. This is a whole set of packages put together, intended to work in tandem with one another. At this point, if you haven’t already, install the tidyverse in your Console: install.packages(&quot;tidyverse&quot;) Now every time you start up an R notebook, you’ll want to activate it. R notebooks don’t remember where you left off, so you usually have to run all of your code chunks when you close out your work and start it up later on. When you start using more packages, or libraries, it’s a good idea to have them at the beginning of your work (the “message=FALSE” part suppresses some warning messages that are scary but not very usefull whenever the tidyverse is loaded.) library(tidyverse) 3.4 Loading data Most of the time, you’ll want to load in data that comes as a CSV or one of its cousins (see the file format tutorial if you don’t remember what that is. Generally, R will guess what type of column each one is – number, text or date. There are ways to override its guess, but it’s often right. This command reads a CSV file that is stored on the Web rather than on your computer. The following code chunk: Creates a variable to hold the long link address, so it’s easier to troubleshoot later. (It also means you can copy and paste this code into another program, and just change the link address to read something else) Asks the tidyverse to execute the command read_csv on the stored link address. The “url” part tells R that it is coming from the Web rather than from a file stored on your computer. This data is from the Phoenix open government site, and contains staff salaries as of 2018 #the location on the Web for the data set&#39;s csv download my_link &lt;- &quot;https://www.phoenixopendata.com/dataset/0c02bbfd-08d9-41e9-a00c-97848a9f7350/resource/3a5c2950-88e3-4cb4-b436-c78d2a266c75/download/open-data-staff-salaries-as-of-12-31-2018.csv&quot; #use it in a read_csv command phx_salaries &lt;- read_csv( url(my_link) ) When you run this code, you’ll rececive a scary looking message. Don’t worry - it’s just giving you some information about what it found in the online file: r message Look at the Environment tab on the upper right, and you’ll see you’ve created two varialbes. One is a data frame (with an arrow), the other is simple text variable. You can look at your data by clicking on its name. r view 3.4.1 Column names By default, R will read the first row of a CSV as the column name, which usually is a good thing. However, it’s often useful to change the names using a convention that you use all the time. For me, it’s lower case with a \"_\" separating words. Here’s how to change the column names on our data, then print off a few lines of the data colnames (phx_salaries) &lt;- c(&quot;last_name&quot;, &quot;first_name&quot;, &quot;description&quot;, &quot;annual_rate&quot;) # head() prints out the first 6 rows. tail() prints out the last 6. head(phx_salaries) ## # A tibble: 6 x 4 ## last_name first_name description annual_rate ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;dbl&gt; ## 1 Aamodt Gail Police Officer 72426. ## 2 Abbitt Ryan Firefighter 56hr 67975. ## 3 Abbott Christie Forensic Scientist IV 99195. ## 4 Abdellatif Tariq Environmental Quality Spec 73653. ## 5 Abdin Patricia Engineering Tech 35714. ## 6 Abdoulkadri Almoustapha Municipal Security Guard 38938. "],
["verbs-1-select-and-filter.html", "Chapter4 Verbs 1: Select and filter 4.1 Key takeaways 4.2 Load the tidyverse and the data 4.3 Create a new data frame from an old one 4.4 Select - choosing columns 4.5 Filter - choosing rows 4.6 Arrange - change the order 4.7 Traps 4.8 Resources", " Chapter4 Verbs 1: Select and filter 4.1 Key takeaways Verb 1 - select to subset the data frame vertically (pick out / rename columns) Verb 2 - filter to subset the data frame horizontally (pick out rows) Verb 3 - arrange to display the data in a certain order Troubleshooting common error messages 4.2 Load the tidyverse and the data We’re going to use some standard ways to pick out information from a data frame using verbs: select and filter. This is all part of the tidyverse, so it must be run every time you want to use the verbs. First, we’ll load some data that has been saved from the Tempe Open Data site – a list of suspected opioid EMS calls in the city. This should look familiar: my_link &lt;- &quot;https://cronkitedata.github.io/cronkite-docs/assets/data/csv/opioidemscalls.csv&quot; #use it in a read_csv command opioid_calls_orig &lt;- read_csv( url(my_link) ) If you followed along, you should have 650 observations and 21 variables in your “Environment” tab in the upper right. 4.3 Create a new data frame from an old one Using the tidyverse (and specifically, a package included in it called DPLYR), we can build our queries a little at a time, checking as we go to see how they worked. Remember, create a new version of a variable using the “&lt;-” operator: new_version &lt;- (think of it as pushing the right side into the left side) Now we’ll add an operator that looks similar, but is completely different – the “%&gt;%” operator do this %&gt;% (think of this as the words &quot;and then...&quot;) do that 4.4 Select - choosing columns In Excel, we never had the opportunity of just pulling little cuts of our data vertically – we could show only some of the rows, but we had to start a whole new sheet (or manually hide some columns) if it was too wide. The “select” verb picks out COLUMNS of your data, and allows you to rename at the same time. Note that R is case-sensitive, meaning that the variable named Age is not the same thing as the variable named age. This is one reason rename columns using a common pattern – you don’t have to think about it again. It’s also useful to remove spaces and special characters from your column names, which are difficult to reference with them. This code chunk selects only some of the variables from our original data frame and saves them in a new data frame: opioid_calls &lt;- #create a new data frame, &quot;opioid_calls&quot; opioid_calls_orig %&gt;% #start with the old data frame and then.. select (id = OBJECTID, #pick out only some columns, and change their names at the same time incident_date = IncidentDate, dow = Day_of_Week_Sort, narcan = `Narcan/Naloxone Given`, #you have to use back-ticks for special characters impression = Primary_Impression, age = Age, gender = Patient_Gender, asu_yn = Is_ASU_student, vet_yn = Is_Veteran, homeless_yn = Is_Homeles, special_population = Spec_Pop ) Here’s what it the first few columns look like: id incident_date dow narcan impression age gender asu_yn vet_yn homeless_yn special_population 2 1/3/2017 11:42 (2) Tuesday No Alcohol Intoxication (F10.9) 40 to 44 Female No No No No 3 1/9/2017 1:08 (1) Monday Yes ALOC (R41.82) 40 to 44 Male No No No No 4 1/9/2017 1:55 (1) Monday No No Apparent Illness or Injury (Z71.1) 20 to 24 Male No No Yes Homeless 5 1/9/2017 10:23 (1) Monday No Overdose- Unintentional (T50.901A) 20 to 24 Male No No Yes Homeless 6 1/9/2017 17:59 (1) Monday No Pain due to Trauma (G89.11) 70 to 74 Male No No No No 7 1/11/2017 11:10 (3) Wednesday Yes ALOC (R41.82) 80 to 84 Male No No No No 4.4.1 Optional: Other ways to select R has a lot of shortcuts so you don’t have to type as much as in some other languages. You can identify columns by their position in the file, by the kind of data they hold (numbers, characters, etc.), or by the words their names contain. Here’s one example opioid_calls %&gt;% select ( id, weekday = dow, narcan : gender, #vars narcan through gender in the list contains (&quot;yn&quot;) # has &quot;yn&quot; in the name ) 4.5 Filter - choosing rows *Filter** is the verb you use to choose which rows are included in your output. If “select” works on columns, “filter” works on rows. To filter, you can nest and combine conditions. Here are the common operators: == equals &gt; Is more than &lt; Is less than %in% Is in a list of values != does NOT equal Connect them with logical operators, including: | &quot;Or&quot; -- think of it as &quot;this or that&quot; &amp; &quot;And&quot; -- both things must be true “==” isn’t “=” ! You always need two equals signs for comparison. A single = sign is used to assign something to another value. 4.5.1 One filter If you don’t assign the result to another variable, or to itself, it will just print out on the screen: opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; ) %&gt;% glimpse # look at the output shown by variable, which shows the column names and one lines&#39; worth of data ## Observations: 370 ## Variables: 11 ## $ id &lt;dbl&gt; 3, 7, 11, 12, 13, 18, 20, 21, 25, 29, 30, 34,… ## $ incident_date &lt;chr&gt; &quot;1/9/2017 1:08&quot;, &quot;1/11/2017 11:10&quot;, &quot;1/14/201… ## $ dow &lt;chr&gt; &quot;(1) Monday&quot;, &quot;(3) Wednesday&quot;, &quot;(6) Saturday&quot;… ## $ narcan &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Ye… ## $ impression &lt;chr&gt; &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.… ## $ age &lt;chr&gt; &quot;40 to 44&quot;, &quot;80 to 84&quot;, &quot;35 to 39&quot;, &quot;40 to 44… ## $ gender &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Ma… ## $ asu_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… ## $ vet_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… ## $ homeless_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… ## $ special_population &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… 4.5.2 A compound filter opioid_calls %&gt;% filter (narcan == &quot;Yes&quot; &amp; asu_yn == &quot;Yes&quot;) 4.5.3 An even more compound filter 4.5.3.1 OR conditions Say we want either asu OR veterans who got Narcan. Here’s a query that combines the and (&amp;) condition with an or (|) condition: opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; &amp; (asu_yn == &quot;Yes&quot; | vet_yn == &quot;Yes&quot; ) ) 4.5.3.2 %in% conditions Use the operator %in% when you want to pick among several possible answers. Say I want to look at anyone aged 20 to 29. Instead of “or”, I can use %in% because it’s only one column: opioid_calls %&gt;% filter (age %in% c(&quot;20 to 24&quot;, &quot;25 to 29&quot;)) 4.6 Arrange - change the order “Arrange” is the equivalent of “Sort” in a spreadsheet - it’s more precise in its meaning, and instructs R to re-arrange the rows of a data frame using the order identified in one or more columns. Try to piece together what this does: opioid_calls %&gt;% select (dow, narcan, age, gender, asu_yn) %&gt;% filter (dow %in% c(&quot;(6) Saturday&quot;, &quot;(7) Sunday&quot;) &amp; narcan == &quot;Yes&quot;) %&gt;% arrange ( age ) ## # A tibble: 116 x 5 ## dow narcan age gender asu_yn ## &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; &lt;chr&gt; ## 1 (7) Sunday Yes 15 to 19 Male Unknown ## 2 (7) Sunday Yes 15 to 19 Male Yes ## 3 (6) Saturday Yes 15 to 19 Male No ## 4 (6) Saturday Yes 15 to 19 Female Unknown ## 5 (6) Saturday Yes 15 to 19 Male No ## 6 (7) Sunday Yes 15 to 19 Female Unknown ## 7 (6) Saturday Yes 15 to 19 Female Unknown ## 8 (7) Sunday Yes 15 to 19 Male No ## 9 (6) Saturday Yes 15 to 19 Female No ## 10 (6) Saturday Yes 20 to 24 Female Unknown ## # … with 106 more rows 4.7 Traps 4.7.1 Case-sensitivity R is always case-sensitive, which means that it makes a difference whether an object, a column name or the value of a variable (like Male) is upper-case, lower-case or some proper case. For example: filter (opioid_calls, narcan == &quot;yes&quot;) will result in 0 cases, because narcan is shown as “Yes”, not as “yes”. Instead, match the case to what you have in your data. 4.7.2 Equals versus double-equals You’ll get this weird error if you try to use an equals sign as a comparison operator: filter(opioid_calls, narcan = &quot;Yes&quot;) ## `narcan` (`narcan = &quot;Yes&quot;`) must not be named, do you need `==`? Note that R is guessing that you meant “==” instead. It won’t always be so kind. 4.7.3 Forgetting the “and then” operator (%&gt;%) You also get a weird error if you forget to string together commands without the %&gt;%. In this example, it prints the first list with the filter, then doesn’t know what to do with the group_by(dow) part, and says that it can’t find an object called “dow”. This is very common and hard to remember. A code chunk that looks like this: filter (opioid_calls, narcan == &quot;Yes&quot;) arrange (dow) will result in the error that says, Error in arrange(dow) : object &#39;dow&#39; not found It doesn’t make much sense, except it’s telling you that it is no longer finding a field called dow. So it does the filter, gives you the results, then tries to run another command. This is really common and a pain. R thought you had TWO things you wanted to do – one is just the filter, the other is an error. The fix is to put the %&gt;% after the filter. 4.8 Resources 4.8.1 Tutorials “Teaching R” videos. They’re a little more detailed than we need, but it’s a useful review of most of what we’ve done. Andrew Ba Tran’s “Lesson 3: Wrangling data” from the R for Journalists website Matt Waite’s chapter on filters – note that it has a verb we haven’t looked at yet, called “mutate” Data School “Faster data maipulation with dplyr”, which is a little more in-depth than we need but is easy to follow. "],
["verbs-2-group-by-and-summarise.html", "Chapter5 Verbs 2: group_by and summarise 5.1 Key takeaways 5.2 Read in some data 5.3 group_by / summarise () verbs 5.4 Resources", " Chapter5 Verbs 2: group_by and summarise 5.1 Key takeaways group_by creates one row for every identical value of a variable. summarise calculates summary statistics for each of those values. You will rarely use group_by without summarise() These queries answer the questions, “How many”, and “how much?” If your data is not standardized, you will get many, many groups that might not make sense. That is, if a variable sometimes says “Lettuce” and sometimes says “Lettuce - Romaine”, they will be different groups. If a variable has “Pistol” in one row and “pistol” in another, they will also be different groups. 5.2 Read in some data We’ve read the Serial Killer Detective from the New Yorker in class. The project makes the dataset public, and Andrew Ba Tran uses the entire country’s data in his online course at R for Journalists. I’ve taken that dataset, made it a little simpler and pulled out just the Arizona cases. NOTE: My apologies – This dataset has slightly different variable names and types than the one we worked with in filtering. I’ll go back and try to fix it but don’t be surprised if it’s just a little different. For example, I don’t have the weapon or relationship codes in this one. As always, load the tidyverse library(tidyverse) And load a dataset saved in native R format from our course website: load (url(&quot;https://cronkitedata.github.io/cronkite-docs/assets/data/r-data/murders.Rda&quot;)) #print out the structure of the dataset str(murders) ## &#39;data.frame&#39;: 29655 obs. of 18 variables: ## $ id : Factor w/ 719011 levels &quot;197601001AKASP00&quot;,..: 41 42 43 44 45 46 47 48 49 50 ... ## $ cntyfips : num 4005 4013 4013 4013 4013 ... ## $ ori : Factor w/ 12616 levels &quot;AK00101&quot;,&quot;AK00102&quot;,..: 570 586 589 590 593 595 598 620 642 650 ... ## $ state : Factor w/ 54 levels &quot;Alaska&quot;,&quot;Alabama&quot;,..: 4 4 4 4 4 4 4 4 4 4 ... ## $ agency : chr &quot;Flagstaff&quot; &quot;Maricopa County&quot; &quot;Chandler&quot; &quot;El Mirage&quot; ... ## $ agency_type : Factor w/ 8 levels &quot;Sheriff&quot;,&quot;County police&quot;,..: 3 1 3 3 3 3 3 3 3 3 ... ## $ solved : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 1 2 2 2 2 2 2 1 2 ... ## $ year : num 1976 1976 1976 1976 1976 ... ## $ situation : Factor w/ 6 levels &quot;Single victim/single offender&quot;,..: 1 2 1 1 1 1 1 1 2 1 ... ## $ victim_age : num 1 18 19 20 43 0 38 26 67 58 ... ## $ victim_sex : Factor w/ 3 levels &quot;Female&quot;,&quot;Male&quot;,..: 2 1 2 2 2 1 2 2 2 2 ... ## $ victim_race : Factor w/ 5 levels &quot;Asian or Pacific Islander&quot;,..: 5 5 5 2 5 5 5 2 5 5 ... ## $ weapon : Factor w/ 17 levels &quot;Firearm, type not stated&quot;,..: 8 6 2 2 6 8 2 4 12 4 ... ## $ circumstance : Factor w/ 32 levels &quot;Rape&quot;,&quot;Robbery&quot;,..: 28 32 30 18 29 11 18 31 6 18 ... ## $ vic_relate_to_offender: Factor w/ 29 levels &quot;Acquaintance&quot;,..: 24 26 25 2 12 6 5 25 26 12 ... ## $ offender_age : num 20 999 51 24 32 19 44 27 999 29 ... ## $ offender_sex : Factor w/ 3 levels &quot;Female&quot;,&quot;Male&quot;,..: 2 3 2 1 2 1 1 2 3 2 ... ## $ offender_race : Factor w/ 5 levels &quot;Asian or Pacific Islander&quot;,..: 5 4 5 2 2 5 5 5 4 5 ... 5.3 group_by / summarise () verbs Group_by and summarise () almost always go together, the way that a pivot always has one element in the row or column area, and another element that produces the numbers in middle. In fact, almost everything we’ve done so far has a corrollary in an Excel data sheet or pivot table: xl-to-groupby 5.3.1 Summarizing data with group_by Group by is used when you want to answer questions that start with “How many?” and “How much?” . They summarize your data to a new unit of analysis that is more general than the data you started with. Think of it as making piles of cards by suit, or gathering together all the red M&amp;Ms, all the brown ones, and all the other colors into their own little areas, then counting up how many are in each pile. A group by statement is almost always followed by a “summarise” (British spelling) statement, that supplies the number you want to calculate. Give the number a name you’ll recognize later so that it’s easy to refer back to: summarise ( number_of_items = n () , total_amount = sum ( my_variable, na.rm = TRUE), number_of_unique_items = n_distinct (my_variable) ) You can also get the minimum value, maximum value, average, median, etc. One advantage of R over Excel is that you can get medians by groups in R – something that’s quite difficult in Excel. One common task is to look at which categories are largest in a dataset: murders %&gt;% group_by ( weapon ) %&gt;% summarise ( num_of_murders = n() ) %&gt;% arrange ( desc(num_of_murders) ) ## # A tibble: 17 x 2 ## weapon num_of_murders ## &lt;fct&gt; &lt;int&gt; ## 1 Handgun - pistol, revolver, etc 13772 ## 2 Knife or cutting instrument 4402 ## 3 Personal weapons, includes beating 1891 ## 4 Blunt object - hammer, club, etc 1872 ## 5 Rifle 1764 ## 6 Firearm, type not stated 1565 ## 7 Other or type unknown 1407 ## 8 Shotgun 1256 ## 9 Strangulation - hanging 668 ## 10 Asphyxiation - includes death by gas 312 ## 11 Fire 250 ## 12 Narcotics or drugs, sleeping pills 174 ## 13 Other gun 136 ## 14 Drowning 117 ## 15 Poison - does not include gas 32 ## 16 Explosives 20 ## 17 Pushed or thrown out window 17 You can group by more than one variable. For instance, I may want to look at weapon useage by state: murders %&gt;% group_by (weapon, state) %&gt;% summarise (num_of_murders = n() ) %&gt;% arrange ( weapon, state ) ## # A tibble: 67 x 3 ## # Groups: weapon [17] ## weapon state num_of_murders ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; ## 1 Firearm, type not stated Arizona 742 ## 2 Firearm, type not stated Idaho 62 ## 3 Firearm, type not stated Oregon 368 ## 4 Firearm, type not stated Washington 393 ## 5 Handgun - pistol, revolver, etc Arizona 7826 ## 6 Handgun - pistol, revolver, etc Idaho 531 ## 7 Handgun - pistol, revolver, etc Oregon 1650 ## 8 Handgun - pistol, revolver, etc Washington 3765 ## 9 Rifle Arizona 698 ## 10 Rifle Idaho 157 ## # … with 57 more rows 5.3.2 Another example: by state Here are some other examples of data you can calculate, this time by state : murders %&gt;% group_by (state) %&gt;% summarise (num_of_murders = n() , num_of_agencies = n_distinct (agency), first_murder = min(year) , last_murder = max(year), avg_victim_age = mean(victim_age, na.rm=TRUE) ) ## # A tibble: 4 x 6 ## state num_of_murders num_of_agencies first_murder last_murder ## &lt;fct&gt; &lt;int&gt; &lt;int&gt; &lt;dbl&gt; &lt;dbl&gt; ## 1 Ariz… 14484 101 1976 2016 ## 2 Idaho 1430 103 1976 2016 ## 3 Oreg… 4850 186 1976 2016 ## 4 Wash… 8891 210 1976 2016 ## # … with 1 more variable: avg_victim_age &lt;dbl&gt; 5.3.3 Optional: Subtotals R has powerful ways to look at data with group by commands, including calculating subtotals from a grouped query. Here’s an example, in which we calculate the total number of murders next to the murder by weapon: murders %&gt;% group_by (state, weapon) %&gt;% summarise (num_of_murders = n() ) %&gt;% # this is a new verb you haven&#39;t seen yet! mutate ( num_murders_in_state = sum(num_of_murders) ) %&gt;% arrange ( weapon) ## # A tibble: 67 x 4 ## # Groups: state [4] ## state weapon num_of_murders num_murders_in_sta… ## &lt;fct&gt; &lt;fct&gt; &lt;int&gt; &lt;int&gt; ## 1 Arizona Firearm, type not stated 742 14484 ## 2 Idaho Firearm, type not stated 62 1430 ## 3 Oregon Firearm, type not stated 368 4850 ## 4 Washington Firearm, type not stated 393 8891 ## 5 Arizona Handgun - pistol, revolve… 7826 14484 ## 6 Idaho Handgun - pistol, revolve… 531 1430 ## 7 Oregon Handgun - pistol, revolve… 1650 4850 ## 8 Washington Handgun - pistol, revolve… 3765 8891 ## 9 Arizona Rifle 698 14484 ## 10 Idaho Rifle 157 1430 ## # … with 57 more rows 5.4 Resources Andrew Ba Tran’s “R for Journalists”, bottom of chapter 3, “Wrangling data” Mary Jo Webster’s “Intro to analysis with Tidyverse” is a walkthrough aimed at group by / summarise. Go back to Pivot Tables in Excel - it’s the same thing. Susan Baert’s dplyr tutorial: summarizing data Matt Waite’s “Aggregates” chapter "],
["verbs-3-mutate.html", "Chapter6 Verbs 3: mutate 6.1 Key takeaways 6.2 Read in some data 6.3 Simple arithmetic 6.4 Create categories 6.5 Standardize data 6.6 Resources", " Chapter6 Verbs 3: mutate 6.1 Key takeaways NOTE: Most journalism tutorials do group_by/summarise BEFORE they introduce mutate. But most computer science tutorials reverse that order. The reason is that journalists often don’t have datasets that have many numbers, so the simple arithmetic isn’t as important. mutate just means “compute”, or convert one or more variables into something new. mutate is the same thing as creating a new column in Excel with a formula There are several common mutate tasks. The most important for us are: Convert unstandardized data into standardized, such as yes-or-no variables or all lower case Use arithmetic on numeric variables Use conditional statements to put different values on variables, instead of filtering one at a time. OPTIONAL: Mutate can replace text or values Change the data type from, say, text to date and time. 6.2 Read in some data We’ve read the Serial Killer Detective from the New Yorker in class. The project makes the dataset public, and Andrew Ba Tran uses the entire country’s data in his online course at R for Journalists. I’ve taken that dataset, made it a little simpler and pulled out just the Arizona cases. As always, load the tidyverse library(tidyverse) And load a dataset saved in native R format from our course website: load (url(&quot;https://cronkitedata.github.io/cronkite-docs/assets/data/r-data/murders.Rda&quot;)) #print out the structure of the dataset str(murders) ## &#39;data.frame&#39;: 29655 obs. of 18 variables: ## $ id : Factor w/ 719011 levels &quot;197601001AKASP00&quot;,..: 41 42 43 44 45 46 47 48 49 50 ... ## $ cntyfips : num 4005 4013 4013 4013 4013 ... ## $ ori : Factor w/ 12616 levels &quot;AK00101&quot;,&quot;AK00102&quot;,..: 570 586 589 590 593 595 598 620 642 650 ... ## $ state : Factor w/ 54 levels &quot;Alaska&quot;,&quot;Alabama&quot;,..: 4 4 4 4 4 4 4 4 4 4 ... ## $ agency : chr &quot;Flagstaff&quot; &quot;Maricopa County&quot; &quot;Chandler&quot; &quot;El Mirage&quot; ... ## $ agency_type : Factor w/ 8 levels &quot;Sheriff&quot;,&quot;County police&quot;,..: 3 1 3 3 3 3 3 3 3 3 ... ## $ solved : Factor w/ 2 levels &quot;No&quot;,&quot;Yes&quot;: 2 1 2 2 2 2 2 2 1 2 ... ## $ year : num 1976 1976 1976 1976 1976 ... ## $ situation : Factor w/ 6 levels &quot;Single victim/single offender&quot;,..: 1 2 1 1 1 1 1 1 2 1 ... ## $ victim_age : num 1 18 19 20 43 0 38 26 67 58 ... ## $ victim_sex : Factor w/ 3 levels &quot;Female&quot;,&quot;Male&quot;,..: 2 1 2 2 2 1 2 2 2 2 ... ## $ victim_race : Factor w/ 5 levels &quot;Asian or Pacific Islander&quot;,..: 5 5 5 2 5 5 5 2 5 5 ... ## $ weapon : Factor w/ 17 levels &quot;Firearm, type not stated&quot;,..: 8 6 2 2 6 8 2 4 12 4 ... ## $ circumstance : Factor w/ 32 levels &quot;Rape&quot;,&quot;Robbery&quot;,..: 28 32 30 18 29 11 18 31 6 18 ... ## $ vic_relate_to_offender: Factor w/ 29 levels &quot;Acquaintance&quot;,..: 24 26 25 2 12 6 5 25 26 12 ... ## $ offender_age : num 20 999 51 24 32 19 44 27 999 29 ... ## $ offender_sex : Factor w/ 3 levels &quot;Female&quot;,&quot;Male&quot;,..: 2 3 2 1 2 1 1 2 3 2 ... ## $ offender_race : Factor w/ 5 levels &quot;Asian or Pacific Islander&quot;,..: 5 4 5 2 2 5 5 5 4 5 ... 6.3 Simple arithmetic Use the usual arithmetic operators to calculate numbers: + Addition - Subtraction * Multiplication / Division Using Andrew’s example, calcuate the difference in age between the victim and the offender, but only when both exist. (The dataset codes the age as 999 when it’s not available.) murders %&gt;% select ( id, state, agency, solved, year, victim_age, offender_age) %&gt;% filter ( victim_age &lt; 999 &amp; offender_age &lt; 999) %&gt;% mutate ( age_diff_from_offender = offender_age - victim_age) %&gt;% head() ## id state agency solved year victim_age offender_age ## 1 197601001AZ00301 Arizona Flagstaff Yes 1976 1 20 ## 2 197601001AZ00705 Arizona Chandler Yes 1976 19 51 ## 3 197601001AZ00707 Arizona El Mirage Yes 1976 20 24 ## 4 197601001AZ00713 Arizona Glendale Yes 1976 43 32 ## 5 197601001AZ00717 Arizona Mesa Yes 1976 0 19 ## 6 197601001AZ00723 Arizona Phoenix Yes 1976 38 44 ## age_diff_from_offender ## 1 19 ## 2 32 ## 3 4 ## 4 -11 ## 5 19 ## 6 6 6.4 Create categories In this case, we might just want to note whether the offender was older or younger than the victim. This is a conditional statement. R has two ways to do conditionals: if_else : Use it when there are only two possible outcomes, yes or no case_when : Use it when there are several different possible conditions or outcomes. We’ll stick with if_else for now, which has the syntax: if_else ( condition , value if true, value if false ) Here’s what the new variable might look like: murders %&gt;% select ( id, state, agency, solved, year, victim_age, offender_age) %&gt;% filter ( victim_age &lt; 999 &amp; offender_age &lt; 999) %&gt;% mutate ( victim_younger_older = if_else (victim_age &lt; offender_age, &quot;Younger&quot;, &quot;Older or the same&quot;) ) %&gt;% select (-year, -solved) %&gt;% # ex. take away vars with minus sign head() ## id state agency victim_age offender_age ## 1 197601001AZ00301 Arizona Flagstaff 1 20 ## 2 197601001AZ00705 Arizona Chandler 19 51 ## 3 197601001AZ00707 Arizona El Mirage 20 24 ## 4 197601001AZ00713 Arizona Glendale 43 32 ## 5 197601001AZ00717 Arizona Mesa 0 19 ## 6 197601001AZ00723 Arizona Phoenix 38 44 ## victim_younger_older ## 1 Younger ## 2 Younger ## 3 Younger ## 4 Older or the same ## 5 Younger ## 6 Younger Note that because we only have two choices, we have to code people of the same age in one of the two groups. You’d use case_when if you wanted to create three groups. Keep this in mind when we get to group_by. It’s a way to create categories you can use in groups. 6.5 Standardize data There are several problems that often come with datasets in the wild: They have extra spaces floating around that are considered important characters, or they’re in mixed case form, or they use different words for the same thing. When you find these, you’ll want to use “string” operations to standardize them. One example is lower-casing all words so you don’t need to pay attention to them. In this case, we’re replacing the original variable with its lower-cased one. (This generally isn’t a good idea – you’d usually create a new variable, because you may need to get back to the original some day. But if you’re creating a new dataset, it’s not as important.): murders %&gt;% select ( agency) %&gt;% mutate (agency = tolower(agency)) %&gt;% head() ## agency ## 1 flagstaff ## 2 maricopa county ## 3 chandler ## 4 el mirage ## 5 glendale ## 6 mesa 6.6 Resources Andrew Ba Tran’s “R for Journalists”, bottom of chapter 3, “Wrangling data” Mary Jo Webster’s “Intro to analysis with Tidyverse” is a walkthrough aimed at group by / summarise. Go back to Pivot Tables in Excel - it’s the same thing. Susan Baert’s dplyr tutorial: summarizing data Matt Waite’s “Aggregates” chapter "]
]
