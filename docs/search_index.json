[
["031-select-filter.html", "5 Verbs Part 1: Picking and choosing 5.1 Key takeaways 5.2 Select - choosing columns 5.3 Filter - choosing rows 5.4 Arrange - change the order 5.5 Traps 5.6 Resources", " 5 Verbs Part 1: Picking and choosing 5.1 Key takeaways Verb 1 - select to subset the data frame vertically (pick out / rename columns) Verb 2 - filter to subset the data frame horizontally (pick out rows) Verb 3 - arrange to display the data in a certain order Troubleshooting common error messages We’re going to use some standard ways to pick out information from a data frame using verbs: select and filter. Don’t forget to load the tidyverse! library(tidyverse) This tutorial uses data that was downloaded in 2019 from the Tempe, Ariz., Open data site. It’s since been removed. It contains a list of opioid-related EMS calls for the city. There was virtually no documentation on the site to explain the variables. (Tempe officials have said that they are planning to republish it with less detail.) my_link &lt;- &quot;https://cronkitedata.github.io/cronkite-docs/assets/data/csv/opioidemscalls.csv&quot; #use it in a read_csv command opioid_calls_orig &lt;- read_csv(my_link) Once read in, the dataset has 650 rows and 21 columns: 5.2 Select - choosing columns In Excel, we never had the opportunity of just pulling little cuts of our data vertically – we could filter the rows, but not the columns. The “select” verb picks out COLUMNS of your data, and allows you to rename at the same time. Note that R is case-sensitive, meaning that the variable named Age is not the same thing as the variable named age. This is one reason rename columns using a common pattern – you don’t have to think about it again. It’s also useful to remove spaces and special characters from your column names, which are difficult to reference with them. This code chunk selects only some of the variables from our original data frame and saves them in a new data frame: opioid_calls &lt;- #create a new data frame, &quot;opioid_calls&quot; opioid_calls_orig %&gt;% #start with the old data frame and then.. select (id = OBJECTID, #pick out only some columns, and change their names at the same time incident_date = IncidentDate, dow = Day_of_Week_Sort, narcan = `Narcan/Naloxone Given`, #you have to use back-ticks for special characters impression = Primary_Impression, age = Age, gender = Patient_Gender, asu_yn = Is_ASU_student, vet_yn = Is_Veteran, homeless_yn = Is_Homeles, special_population = Spec_Pop ) Here’s what it the first few rows of our selected columns looks like. (It might be chopped of on the right in your browser.) id incident_date dow narcan impression age gender asu_yn vet_yn homeless_yn special_population 2 1/3/2017 11:42 (2) Tuesday No Alcohol Intoxication (F10.9) 40 to 44 Female No No No No 3 1/9/2017 1:08 (1) Monday Yes ALOC (R41.82) 40 to 44 Male No No No No 4 1/9/2017 1:55 (1) Monday No No Apparent Illness or Injury (Z71.1) 20 to 24 Male No No Yes Homeless Optional: Other ways to select R has a lot of shortcuts so you don’t have to type as much as in some other languages. You can identify columns by their position in the file, by the kind of data they hold (numbers, characters, etc.), or by the words their names contain. Here’s an example: opioid_calls %&gt;% select ( id, weekday = dow, narcan : gender, #vars narcan through gender in the list contains (&quot;yn&quot;) # has &quot;yn&quot; in the name ) 5.3 Filter - choosing rows *Filter** is the verb you use to choose which rows are included in your output. Use comparison operators to choose the rows that meet certain conditions. The ones you’ll usually use are: == equals &gt; Is more than &lt; Is less than %in% Is in a list of values != does NOT equal Connect them with logical operators, including: | &quot;Or&quot; -- think of it as &quot;this or that&quot; &amp; &quot;And&quot; -- both things must be true “==” isn’t “=” ! You always need two equals signs for comparison. A single = sign is used to assign something to another value. 5.3.1 One filter If you don’t create a new data frame using the &lt;- assignment, it will just print out on the screen. Use the “glimpse” verb to take a peek at it vertically in a way the fits on the screen. Put the name of the column on the left side of the comparison, connect it with two equal signs, and put the value you want to look for (in quotes if it’s text) on the right. The two equal signs means that it must be EXACTLY the same – not sort of the same – including upper and lower case. opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; ) %&gt;% glimpse ## Observations: 370 ## Variables: 11 ## $ id &lt;dbl&gt; 3, 7, 11, 12, 13, 18, 20, 21, 25, 29, 30, 34, 35, 39, 40, 41, 43, 44, 48, 51, 52, 56, 61, 62, 65, 67, 68, 70, 73,… ## $ incident_date &lt;chr&gt; &quot;1/9/2017 1:08&quot;, &quot;1/11/2017 11:10&quot;, &quot;1/14/2017 22:51&quot;, &quot;1/15/2017 6:56&quot;, &quot;1/16/2017 15:54&quot;, &quot;1/22/2017 6:36&quot;, &quot;1/… ## $ dow &lt;chr&gt; &quot;(1) Monday&quot;, &quot;(3) Wednesday&quot;, &quot;(6) Saturday&quot;, &quot;(7) Sunday&quot;, &quot;(1) Monday&quot;, &quot;(7) Sunday&quot;, &quot;(7) Sunday&quot;, &quot;(1) Monda… ## $ narcan &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;… ## $ impression &lt;chr&gt; &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.82)&quot;, &quot;Overdose- Intentional (T50.902A)&quot;, &quot;ALOC (R41.82)&quot;, &quot;ALOC (R4… ## $ age &lt;chr&gt; &quot;40 to 44&quot;, &quot;80 to 84&quot;, &quot;35 to 39&quot;, &quot;40 to 44&quot;, &quot;30 to 34&quot;, &quot;15 to 19&quot;, &quot;45 to 49&quot;, &quot;30 to 34&quot;, &quot;35 to 39&quot;, &quot;25 t… ## $ gender &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;… ## $ asu_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unkno… ## $ vet_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknow… ## $ homeless_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown… ## $ special_population &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;Veteran&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Un… Here are the pieces of that function: In this case, you know that there were 370 rows that met your condition. It looks right – all of the narcan items that we can see are “Yes”. 5.3.2 A compound filter Filter for more than one condition that must be true using the “and” operator: &amp;. opioid_calls %&gt;% filter (narcan == &quot;Yes&quot; &amp; asu_yn == &quot;Yes&quot;) 5.3.3 Even more compound filters OR conditions Say we want either asu OR veterans who got Narcan. Here’s a query that combines the and (&amp;) condition with an or (|) condition: opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; &amp; (asu_yn == &quot;Yes&quot; | vet_yn == &quot;Yes&quot; ) ) %in% conditions Use the operator %in% when you want to pick among several possible answers. Say I want to look at anyone aged 20 to 29. Instead of “or”, I can use %in% because it’s only one column: opioid_calls %&gt;% filter (age %in% c(&quot;20 to 24&quot;, &quot;25 to 29&quot;)) 5.4 Arrange - change the order “Arrange” is the equivalent of “Sort” in a spreadsheet - it’s more precise in its meaning, and instructs R to re-arrange the rows of a data frame using the order identified in one or more columns. Try to piece together what this does: opioid_calls %&gt;% select (dow, narcan, age, gender, asu_yn) %&gt;% filter (dow %in% c(&quot;(6) Saturday&quot;, &quot;(7) Sunday&quot;) &amp; narcan == &quot;Yes&quot;) %&gt;% arrange ( age ) (Reminder: the c() operator makes a list – it combines the two quoted values into a vector.) 5.5 Traps Case-sensitivity R is always case-sensitive, which means that it makes a difference whether an object, a column name or the value of a variable (like Male) is upper-case, lower-case or some proper case. For example: opioid_calls %&gt;% filter (narcan == &quot;yes&quot;) .. results in 0 cases, because narcan is shown as “Yes”, not as “yes”. Instead, match the case to what you have in your data. Equals versus double-equals You’ll get this weird error if you try to use an equals sign as a comparison operator: filter(opioid_calls, narcan = &quot;Yes&quot;) ## Error: `narcan` (`narcan = &quot;Yes&quot;`) must not be named, do you need `==`? Note that R is guessing that you meant “==” instead. It won’t always be so kind. The “and then” operator (%&gt;%) You also get a weird error if you forget to string together commands with the %&gt;% connector. A code chunk that looks like this: filter (opioid_calls, narcan == &quot;Yes&quot;) arrange (dow) will result in the error that says, Error in arrange(dow) : object &#39;dow&#39; not found It doesn’t make much sense, except it’s telling you that it is no longer finding a field called dow. It’s done the filter and thinks it was finished because there was no AND THEN connector. Then it tries to run another command, but it’s starting from scratch without a data frame to work from. This is really common and a pain. R thought you had TWO things you wanted to do – one is just the filter, the other is an error. The fix is to put the %&gt;% after the filter. The dreaded NA Missing information is recorded in R as NA. The problem is, this isn’t a value at all – it will never match anything, will never be bigger or smaller than anything, and will be ignored if you sort on it. We’ll come back to this, but just remember that it’s a problem. 5.6 Resources 5.6.1 Exercises You have read “The Serial Killer Detective”, from the New Yorker, profiling Hargrove’s attempt to get better murder data than the government has available. I have taken the data from that project and converted it into an R data object that includes only murders in the West. 5.6.2 Tutorials “Teaching R” videos. They’re a little more detailed than we need, but it’s a useful review of most of what we’ve done. Andrew Ba Tran’s “Lesson 3: Wrangling data” from the R for Journalists (learn-r) website. You can watch the videos and take the quizzes without following along on your computer. Matt Waite’s chapter on filters – note that it has a verb we haven’t looked at yet, called “mutate” Data School “Faster data maipulation with dplyr”, which is a little more in-depth than we need but is easy to follow. "]
]
