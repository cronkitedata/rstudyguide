[
["index.html", "R Study Guide for Cronkite School of Journalism Preface Using the examples with packages", " R Study Guide for Cronkite School of Journalism Sarah Cohen, Knight Chair in Journalism Preface This online book is serving as a study guide for students in my data journalism classes at the Cronkite School of Journalism. Eventually, this will put together the resources for the whole class, but for now it just includes the section on learning R and R Markdown. I’m grateful for all of the experts and teachers out there who have made their training materials open to the world, and helped build a wealth of materials for students of all types. I’ve particularly leaned on Matt Waite, of the University of Nebraska and Jesse Lecy of Arizona State University, who generously share their course materials. Using the examples with packages When you start learning R, you’ll realize that very little is done without packages. These have to be installed once per computer, or once per project if you’re using the cloud version. This is just a list of all of the packages that have to be installed in one list. tidyverse rmarkdown lubridate janitor Optional, for formatting things: DT knitr prettydocs "],
["011-r-install.html", "1 An R and R Studio tour 1.1 Key takeaways 1.2 Why program? 1.3 Setting up R and R Studio 1.4 An R Studio tour 1.5 Unlocking packages 1.6 Variables 1.7 Resources and exercises", " 1 An R and R Studio tour 1.1 Key takeaways The benefits of learning a programming language Accessing R and RStudio on the cloud, or installing it on your computer Distinguishing the programming language R from the way you interact with it, RStudio. Getting accustomed to the RStudio screen. Interacting with the Console Understanding, installing and invoking packages. Storing values in variables for later use. 1.2 Why program? All programming languages have one thing in common: You write instructions, called algorithms, and the program executes your statements in order. It means you can do more complicated work in computer programming than in point-and-click parts of Excel. It can also scale – you can repeat your instructions millions of times, tweak it a little, and re-run the program without messing anything else up. The computer won’t mind – really. Finally, writing code can be self-documenting. You can largely eliminate those painstaking Excel data diaries and replace them with documents that explain your work as you go. You’ll still need to record information about your interviews and decisions, but you’ll no longer have to write down every mouse click. Why R? It’s free and open source – you will be able to get access to most of what R has to offer without ever paying for a service or a piece of software. More importantly, R has become the de facto tool for statistical and data analysis in many newsrooms and academic settings. Some news organizations strongly prefer interns and entry level data reporters who have at least a little experience with the language. There’s also a huge user base, with many people willing and even eager to help newcomers. R also has extensions, called packages, that cover most tasks you need as a reporter. Other lanugagees like Python can also be extended this way – choosing which one to use is largely a matter of taste and comfort. Many employers don’t care which programming language you know because it’s relatively easy to learn another once you’re comfortable with the concepts. 1.3 Setting up R and R Studio Andrew Heiss, who teaches BYU’s Data Science for Public management, has a detailed walkthrough on getting access to R and R Studio. This is the short version. RStudio Cloud The very easiest approach to getting most everything you need is to sign up for a free account on RStudio Cloud. You’ll use the program through your web browser instead of putting it on your computer. It’s nearly identical to the program you’d run on your laptop. It can be a little slow to start up, and it can crash every once in a while. Be patient, careful and save often. Install yourself If you want to install on your laptop, try these steps. You’ll have to be an administrator allowed to install software on your computer, for it to work. MAC users only: To get R Studio to work properly, your computer should have command line tools installed. These aren’t installed by default in Apple’s operating system. This is a pain, but you only need to do it once. You’ll get annoying errors in R Studio if you don’t do this. Open up a terminal window, found in your Applications folder under Utilities. First, check to see if it’s already installed by typing xcode-select -p. If it replies with a path to a folder, you can skip this part – you already have it. If not, type xcode-select --install. You’ll get an error message saying that it can’t be done because you don’t have command line tools, and would you like to install them now? Say yes. Once it’s done, just close out your terminal. You never wanted that thing you asked to install in the first place. Everyone: Download and install R for your computer. Use the most recent binaries for your operating system. Install R Studio Desktop for your computer ONLY AFTER YOU HAVE INSTALLED R. Use the free community version. 1.4 An R Studio tour Now you’re ready to start using R and R Studio. R is the underlying programming language, which you will probably never use on its own. R Studio is an interface to that language that helps you organize projects, write code, see your results and keep track of your work. Fire up R Studio, not the R language to get started. console 1.4.1 The Console The Console is where you can type commands and interact directly with the programming language. Think of it as a very powerful calculator at first. When you type this: 5+5 after the &gt; prompt, you’ll get this back: [1] 10 When you type this: \"Sarah\" (with quotes) after the &gt; prompt, you’ll get this back: [1] \"Sarah\" But if you type this: Sarah (without quotes) after the &gt; prompt, you’ll get this error: Error: object 'Sarah' not found. That’s because it thinks you want to use a variable named Sarah, not the literal letters S-a-r-a-h 1.4.2 Work in projects One of the things that trips up new users of R is that it’s hard to tell the program where to find things on your computer. The “working directory” can be confusing. One way to get around that is to always work in projects. Projects in R isolate your work in a single folder, which can be transferred from computer to computer without worrying about what’s missing. If you’re using RStudio.cloud, every project is already self-contained. Instead of creating a new file when you start R, create a new project, and tell R where to put the directory when prompted. Then, when you want to return to the project, open the project rather than a file. 1.5 Unlocking packages The real power of R comes with packages. Packages are bundles of programs that others have found useful to extend the base R language. R is almost useless without them. There are thousands of packages available for R, each doing a special job. As a general rule of thumb, install packages using the console. They must be installed once on every computer, or in every project when you use RStudio Cloud. Activate them using the library() command install.packages(&quot;tidyverse&quot;) # quoted, only do this once in the Console library(tidyverse) # not quoted, every time in your program Packages for this class Using the Console, install the packages we need for class: install.packages(&quot;tidyverse&quot;) install.packages(&quot;rmarkdown&quot;) install.packages(&quot;swirl&quot;) A quick note on the tidyverse Almost all of the materials you see related to programming in R have some reference to this thing called the “tidyverse”. One problem with having a lot of packages, often written by hobbyists, is that they’re not very consistent. One might use a comma where another uses some dots, for example. The tidyverse packages up a whole set of other packages that are designed to work together smoothly with similar grammar and syntax. It’s particularly useful for the kind of work reporters do – importing, cleaning and analyzing data that we get from others and can’t control how it’s structured. For many reporters (myself included), R was too difficult to learn before the tidyverse came around. We’ll be working almost exclusively within the tidyverse in this course. The tidyverse is the brainchild of Hadley Wickham, a statistician from New Zealand, who famously identified the tidy data principles we’ve followed all semester. He’s currently the chief data scientist for RStudio in Houston. 1.6 Variables A variable is a container for a value, a list or some other kind of object. At its simplest, it might hold a number or a word. To make a variable, use the assignment operator: &lt;- . Think of it as a value being pushed into a name: my_variable &lt;- 13 When you hit the return button, nothing happens. Instead of printing it, it’s stored it in a variable and it’s added to your Global Environment pane. Now you can use the name instead of the value. Using variables in new variables You can always use a variable you already computed to calculate something new: Working with lists One of the most powerful characteristics of a programming language is that it lets you work on a whole set of values at once, usually through a list. In R, they’re called vectors. Think of them as the values in a column of a spreadsheet. Create a vector with the c operator, short for “combine”: c( &quot;me&quot;, &quot;you&quot;, &quot;everyone&quot;) c( 1, 2, 3) In most contexts, they have to all be the same data type. 1.7 Resources and exercises Before you move on in this book, you should make sure that you have a way to get RStudio, either on your computer or on RStudio Cloud, and that it’s installed properly. Take the swirl() tutorial If you haven’t done it already, install the swirl() package. Do this in the Console: install.packages(\"swirl\") Once it’s installed, activate it using the library command and start it up. library(swirl) swirl() Then just follow the prompts. Don’t worry that they’re red – it doesn’t mean there’s anything wrong. You should do the first section of the first chapter: “1: R Programming: The basics of programming in R” -&gt; “Basic Building Blocks”. At the end, hit the escape key. 1.7.1 Googling for help There are a few tricks to getting a good Google answer. First, set the time frame for the answer to the last year. It doesn’t always work, but at least you’re trying to get more recent answers. R has changed A LOT over the last 3-5 years. You don’t want to get bogged down in the “old” way. Add the name of any package you’re using. If you aren’t sure which one is tripping you up, just add the word “tidyverse” to the query. That will get you closer. Other resources Sharon Machlis’ Practical R for Mass Communications and Journalism has an intro to R and R Studio beginning in chapter 2.3 Ben Stenhaug created a fast-paced video introducing the R Studio interface. Don’t worry too much about what some of it means just yet – just see if you can get used to the different parts of the screen. "],
["021-r-markdown.html", "2 R Markdown 2.1 Key takeaways 2.2 Getting started with R Markdown 2.3 The anatomy of a document 2.4 Knitting your document 2.5 Code chunks 2.6 Resources and exercises 2.7 Bonus: Styling your R Markdown documents", " 2 R Markdown table { font-size:.9em; } 2.1 Key takeaways Markdown makes documenting your work easy Formatting commands in Markdown: headings, links, lists and images. Adding and running code chunks Knitting your markdown into a finished document with code and results. 2.2 Getting started with R Markdown Markdown was invented as an easy way for early contributors to Wikipedia to author documents that would translate to the web. It uses simple formatting rules that don’t require any background in programming, HTML or CSS formatting code. This book is written using Markdown. Variants of markdown are used to create many web sites, including those hosted on Github. R Markdown is an enhanced version of markdown. In it, you write your document around chunks of R code, which integrates your analysis with your writing. (R Markdown is also designed to output your work in other formats, like an actual printed book or slides.) Some news organizations do much of their internal work using R Markdown documents and code. You must install the rmarkdown package before you can use this feature. Install it in the Console. You only have to do this once on each computer, or in each project on rstudio.cloud: install.packages(&quot;rmarkdown&quot;) Unlike other packages, it’s automatically loaded when you start up R Studio. 2.3 The anatomy of a document Markdown uses simple punctuation to create outline levels, lists, links and other elements of a page. There are four parts to an R Markdown document: The “front matter”, or YAML. Plain text with formatting indicators. Code chunks – your R computer code. The results of code chunks - what you get back when you execute the code. The plain text follows a few basic rules. This markdown cheatsheet from Adam Pritchard goes through them, but the most common are: Symbol Format Comments # First level outline usually reserved for the title ## Second level outline … and so on * A bulleted list item Separate from the text by one empty line 1 A numbered list []() A link [my link words](http....) ![]() An image link ![alt-text](path/to/myimage.jpg) &lt;&gt; A simple link shown as an address &lt;https/cronkitedata.github...&gt; ** Bold text **This would be bold** * Italic text *This would be italic* Front matter / YAML at the top The way the R knows to do these things is by reading the very top of the file and looking at the section between the three dashes, which gives values to specific items R Markdown is expecting in a format called YAML. It’s very picky about this, so if you get an error, look there for a problem. The good news is that the YAML is created for you when you create a new R Markdown document. When you get more comfortable, you may want to tweak the look and feel of your document by adding parts to this section. --- title: &quot;Title for your page&quot; author: &quot;Sarah Cohen&quot; date: &quot;1/6/2020&quot; output: html_document --- 2.4 Knitting your document Look at the top of your screen, and you’ll see a knitting needle and the word, “Knit”. Pressing that button will convert your markdown into the finished document. Here’s how it looks pre-knitted and after knitting: There are three reasons it might not work: You haven’t saved the document yet. There is an error in that top YAML section. Just copy one that works and try again. There is an error in your R code. (You’ll see how to skip a chunk with an error later on.) I usually change one default option: I have a large screen so I like to see my document in RStudio rather than as a separate document so I don’t have to flip back and forth between windows. To do that, change the options by clicking on the little gear near the knit button: 2.5 Code chunks So far, this is just a simple document. It doesn’t contain any R code. To add code, you insert a “code chunk”. You can add it by clicking the +Insert button at the top of the document, or by pressing Option/Alt-Cmd-i Add your code in the gray area between the triple-backtic symbols. Run the code chunk by pressing the arrow button within it, or by pressing Cmd/Ctl-Shft-Enter (either Cmd or Ctl) This might not seem like much, but think about how it helps you do your analysis. You can write all of your notes right where you do the work. You don’t have to copy and paste information from one place to another, or share out-of-date spreadsheets with your teammates. R Markdown starts from scratch Every time you close down your computer or restart R, you have to run every code chunk to get back to where you left off. This includes loading any libraries and data. This is actually good – it ensures that your project is reproducable. But it can be confusing at first. I just knit my program as soon as I start up R each time, which takes me to where I left off. 2.6 Resources and exercises Resources “Data driven docs” walkthrough on DS4PS (or, Data Science for the Public Sector) RStudio has a quick tour of R Markdown that goes through more than you even need. It goes a little fast. Exercises Make sure you have already installed the rmarkdown package before going further. Create a new R Markdown document with the following elements: Front matter with your name, the date and a title for your page. A heading introducing a subtopic Within that heading, a list of three things about yourself or about a topic you love, in a bulleted list. Another heading An image that you like (you’ll have to save it in your project.) Another heading A code chunk, in which you create a variable and assign it a value. Then knit the document and compare the sections. 2.7 Bonus: Styling your R Markdown documents Once you’re familiar with R Markdown and comfortable with it, you’ll probably want to make your documents look a little more 21st century than the default. Here are a few things you can do to make it look better: You can change most style options of a document through the YAML front matter that we’ve largely left alone so far. When you create a new document, that front matter is created for you between three dashes at the top. It might usually look like this: --- title: &quot;My title&quot; author: &quot;My name&quot; date: &quot;1/24/2020&quot; output: html_document --- This section is really picky, which is why we’ve left it alone so far. But you can change several styling options very easily if you’re careful. Among the most simple things to change are: A new theme with more modern colors and fonts. Tables that are “paged” rather than simple text output A table of contents for links to each heading. Without doing much else, you can change the look and feel of the knitted document by using free Bootswatch themes (toward the bottom of the page on the bootswatch site). You’ll have to be careful changing the front matter when you use them – it’s very sensitive to exact syntax, including indentation. This example does three things: Uses the “journal” theme from Bootswatch Creates a table of contents that goes to the 2nd outline level (## in your markdown) Prints tables in a more fancy way, that pages both vertically and horizonatally. Just be careful with this: It will print up to 10,000 rows, even if you can’t see them, bringing your browser to a halt pretty quickly. --- title: &quot;My title&quot; author: &quot;My name&quot; date: &quot;1/24/2020&quot; output: html_document: df_print: paged theme: journal toc: true toc_depth: 2 --- Here’s a preview of what my example markdown would look like with these options: journal example with toc There are a lot of other ways to style these documents using other packages. A few you might look into if you’re interested: prettydocs, which tries to match up with the default Github Pages themes. kable and kableExtra to work with styling tables. DT datatables that latches into the Javascript DataTables library, making sortable, searchable tables with tight control over formatting. (Not for the faint of heart if you don’t already know Javascript.) "],
["022-data-frames.html", "3 Data frames and the tidyverse 3.1 Key takeaways 3.2 Getting started 3.3 The data frame 3.4 Introducing the pipe 3.5 Take a break 3.6 Other resources", " 3 Data frames and the tidyverse 3.1 Key takeaways Loading the tidyverse Reading data from from Excel or from a text file. Looking at your data Introducing the “pipe” (%&gt;%) and a verb But first…. 3.2 Getting started Every time you start up R, you will need to load any packages you intend to use. That’s usually the first code chunk in your R Markdown document. If you put all of the libraries you need there, anyone you share with will know which ones have to be installed in the future. Here’s how I start up a new project with a new document: I usually add “message=FALSE” to the r in the brackets to prevent a whole bunch of largely meaningless but scary messages. If there’s a real problem, R will still let me know: (From now on, you’ll only see the code in between the three backtics. They’re invisible in the output.) 3.3 The data frame A data frame is an R “object”, and is treated like any other variable. The difference is that it contains columns and rows, just like a spreadsheet. The best data frames follow the same tidy data principles that we went over in Excel: Each column contains one kind of information – race, sex, address, etc. Each row contains one example of each of those columns, all at the same unit of analysis. Each data frame contains different levels or types of information. 3.3.1 Loading and looking at data Much of the data you use in R starts out as a CSV text file or one of its cousins. (See the file format tutorial if you don’t remember what that is.) Generally, R will guess what type of column each one is – number, text or date. (See the data types tutorial if you forgot what that means.) There are ways to override its guess, but it’s often right. The following code chunk: Creates a variable to store the long address. That makes it easier to troubleshoot or change later on. Asks the tidyverse to execute the function read_csv on the stored link address. The function can read files stored on the web or on your computer. This data is from the Phoenix open government site, and contains staff salaries as of 2018 #the location on the Web for the data set&#39;s csv download my_link &lt;- &quot;https://www.phoenixopendata.com/dataset/0c02bbfd-08d9-41e9-a00c-97848a9f7350/resource/3a5c2950-88e3-4cb4-b436-c78d2a266c75/download/open-data-staff-salaries-as-of-12-31-2018.csv&quot; #use it in a read_csv command phx_salaries &lt;- read_csv( my_link ) When you run this code, you’ll rececive a scary looking message. Don’t worry - it’s just giving you some information about what it found in the online file: Parsing message from import Notice that the column names are set automatically using the first name of the file. One of the first things you’ll often want to do with a csv file is change the names using a standard style. I usually prefer lower case names with underscores between words. If I always use those, I won’t have to remember which. The read_csv command, or function, is part of the tidyverse. The import functions you’ll use the most are: read_csv() read_excel() read_delimited() They all work pretty much the same way on slightly different types of data files. 3.3.2 Examine your data You should now see the name of the data frame in your Global Environment. Click on it to View it, or issue the View(phx_salaries) command. You can look at your data by clicking on its name in the “Global Environment” window, or by using some standard functions in R to explore them. Use the head() function to look at the top and the tail() function to look at the bottom: head(phx_salaries) LAST_NAME FIRST_NAME DESCR ANNUAL RATE Aamodt Gail Police Officer 72425.60 Abbitt Ryan Firefighter 56hr 67974.82 Abbott Christie Forensic Scientist IV 99195.20 tail(phx_salaries) LAST_NAME FIRST_NAME DESCR ANNUAL RATE de la Fuente Mariana Curriculum/Trng Coord*Supv Dev 77334.4 de los Rios Jr Ruben Police Officer 54475.2 von Kampen Michele Caseworker II 57283.2 .. and use the “structure” command to see the variable names and types. str(phx_salaries) ## Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 11956 obs. of 4 variables: ## $ LAST_NAME : chr &quot;Aamodt&quot; &quot;Abbitt&quot; &quot;Abbott&quot; &quot;Abdellatif&quot; ... ## $ FIRST_NAME : chr &quot;Gail&quot; &quot;Ryan&quot; &quot;Christie&quot; &quot;Tariq&quot; ... ## $ DESCR : chr &quot;Police Officer&quot; &quot;Firefighter 56hr&quot; &quot;Forensic Scientist IV&quot; &quot;Environmental Quality Spec&quot; ... ## $ ANNUAL RATE: num 72426 67975 99195 73653 35714 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. LAST_NAME = col_character(), ## .. FIRST_NAME = col_character(), ## .. DESCR = col_character(), ## .. `ANNUAL RATE` = col_double() ## .. ) 3.4 Introducing the pipe This is how I explain the ‘pipe’ to #rstats newbies… pic.twitter.com/VdAFTLzijy — We are R-Ladies (@WeAreRLadies) September 13, 2019 You’ll be seeing a lot of R code that has this format: data_set_name %&gt;% verb ( nouns ) %&gt;% verb ( nouns ) %&gt;% etc... That little symbol, %&gt;% is called the “pipe”. It means “and then…” Here’s a simple example with a verb called rename. It takes the names of the variables from the first line, AND THEN renames them! This is something you often have to do because R will assume that the first row of the csv file contains the names of your variables. Using them, though, can be a pain – you have to remember whether they’re upper or lower case, and you have to put back-ticks (`) around any names with spaces or special characters. Here’s what using the pipe looks like to create a NEW data frame out of the old one with the names changed to lower case with underscores, a common pattern in many computer programs: phx_salaries_renamed &lt;- #create a new data frame out of the next set of commands phx_salaries %&gt;% #start with the original data frame name, AND THEN rename ( last_name=LAST_NAME, # A list of new_name = old_name pairs, separated by commas first_name=FIRST_NAME, job_title = DESCR, annual_pay = `ANNUAL RATE` #note the crazy back-ticks that you have to type for two-word names ) head (phx_salaries_renamed) # print out the first few rows. You can leave out any name you don’t want to save. (There are fancier, faster ways to do this, but don’t worry abou that just yet. This is the easiest to remember.) This code chunk results in something that looks like this: last_name first_name job_title annual_pay Aamodt Gail Police Officer 72425.60 Abbitt Ryan Firefighter 56hr 67974.82 Abbott Christie Forensic Scientist IV 99195.20 3.5 Take a break If you’ve gotten this far, congratulations – you’ve started programming in R. I’ve skipped a lot of details that don’t matter much right now. You’ll see examples of using options and slightly different commands for the same things as we move along. But the process of reading data into R, taking a quick look at it, and acting on it to create a new dataset is one you’ll be doing a lot. Max van den Oetelaar via Unsplash 3.6 Other resources Take a look at Jesse Lecy’s lesson on “Learning How to Learn” from his data science class at ASU. It will make you feel better, I swear. Hadley Wickham’s “R for Data Science” chapter on importing data goes into a lot of the options and variants of the read_csv command. RStudio has one of its many cheat sheets on the read_csv function and its cousins. Unfortunately, a lot of the other resources we’ve seen don’t use the tidyverse versions of the import commands and they work somewhat differently. I think they’ll just be confusing, since we’re not dealing with the “base R” program. 3.6.1 On your own Start a new project in R. Download this Excel file into the folder. Create an R Markdown document and document where you got the file and where it’s stored. Invoke two packages: the tidyverse and readxl1 Try importing the file into R using the read_excel function, which works just like read_csv. Take a look at its structure (str), its top (head) and its bottom (tail). You’ve seen this data before. Try creating a NEW data frame from the original and rename a couple of columns. If you can get past the errors, knit the document and bask in the knowledge that you’ve come a long way. You can be quietly proud. You will likely have some errors to puzzle through if you’ve never programmed anything before. Don’t get discouraged – copy and paste the code from this tutorial, and then adapt it to your needs. Try to read any error messages. Follow the 20-minute rule: If you have been working for 20 minutes without ANY progress and are out of ideas or don’t understand what you’re trying to do, step away from the computer. When you come back, if you’re still stuck, get help on the Slack #sos channel. Be sure to say what exactly you’re trying to do when you get an error and copy the code chunk and the error message. You don’t have to install readxl – it’s part of the tidyverse but it’s not automatically activated.↩ "],
["030-intro-verbs.html", "4 A quick tour of verbs 4.1 Key takeaways 4.2 Looking at your data in pieces and in order 4.3 group_by and summarise to count and sum 4.4 mutate to calculate something new 4.5 join to merge tables together by column; union to add rows", " 4 A quick tour of verbs 4.1 Key takeaways Verbs are functions; nouns are variables or objects. Do one thing at a time using the “and then” operator (%&gt;%). You only really need a few verbs to get a lot done: select, filter, arrange: Pick out and sort specific items group_by, summarise : count and sum by category mutate : create new columns with formulas You’ve probably done most of this before in Excel These are similar to other database languages such as SQL. This chapter will go through the very basics of each verb. Subsequent chapters will go into more detail on how to make them work in a variety of circumstances. Data for this walkthrough All of these sections will be based on the 2017-2018 Arizona immunization data. The data was downloaded from the Arizona Department of Health. The link for “Arizona Reporting Schools Coverage” under each year is the Excel file. The following changes were made to the original file: Remove any specific immunizations other than MMR, for measles Remove schools with under 20 students, for which the state did not report any data individually. It accounted for 113 schools, or about 10 percent of the schools. Estimating all of those schools at their maximum possible (19), it would account for about 2.5 percent of the students. Estimate the number of children in each category by multiplying the percentage by the enrollment. There is room for rounding error in this. Variable name Type Description school_name chr upper case address chr upper case city chr upper case zip_code chr 5-digit zip code, leading 0 if needed school_nurse chr “YES”/“NO” school_type chr “PUBLIC” / “CHARTER” / “PRIVATE” enrolled num 6th grade enrollment num_immune_mmr num # of immunized students for measles num_exempt_mmr num # of student exempt from requirement for measles num_compliance_mmr num total of immune + exempt (in compliance with rules) num_pbe num # with personal believe exempt. for at least 1 immunization num_medical_exempt num # who have a medical exemption for at least 1 immunization num_pbe_exempt_all num # who have personal believe exemption for every shot Note: It seems that some students who could be exempt from mmr get it anyway – there are cases in which there are larger numbers with pbe exemptions for all immunizations than the number with mmr exemptions. 4.1.1 Follow along To follow along with this tutorial, download this R dataset, put it in your project folder (or upload to your rstudio.cloud project) and include the following code chunk. You may need to install “DT” and “scales” if you haven’t already : library(tidyverse) library(DT) library(scales) #this loads a pre-created R data file. Note that here, it&#39;s saved in a subfolder called &quot;data&quot;. # You&#39;ll need to remove that folder path if you saved it elsewhere. load(file=&quot;data/az-immunizations-grade6.Rda&quot;) # this suppresses scientific notation. options(scipen=999, digits=7) Possible errors: Some variation of “file not found”: Look at the path to the file name. If your data isn’t saved there, it won’t be found. Another possibility is that you have opened your R Markdown file as a file, not created it as part of a project, so the default path is wrong. Some variation of “object” or “package” not found: You may have to install some of these packages before you can invoke them. The %&gt;% operator: … and then… The tidyverse encourages you to do your work one step at a time. Instead of packing everything into one command, stack them by saying “start here, and then.. and then .. etc.” grade6_counts %&gt;% # start with the data frame, AND THEN... select (school_name) %&gt;% # pick out the school name only AND THEN ... arrange (school_name) # put them in alphabetical order 4.2 Looking at your data in pieces and in order 4.2.1 select to pick out columns In Excel, there was no easy way to filter data vertically. We could only filter rows. The select verb picks out specific columns. Rename them at the same time by putting the new name on the left side of an equal sign: grade6_counts %&gt;% select ( school = school_name, county, enrolled) %&gt;% head(3) school county enrolled ABRAHAM LINCOLN TRADITIONAL SCHOOL MARICOPA 59 ACACIA ELEMENTARY SCHOOL MARICOPA 134 ACADEMY DEL SOL - HOPE PIMA 53 4.2.2 arrange to sort In Excel, the “Sort” menu item is used to arrange data alphabetically or in numeric order. That’s confusing, because “sorting” can be construed a lot of different ways. For instance, you might “sort” M&amp;Ms into their colors. But in R, the verb is “arrange”, which is much clearer conceptually. The arrange verb puts the rows in order based on the column or columns you specify. This arranges the data from the highest to lowest enrollment by using the desc indicator. You can have more than one column, which takes over when there’s a tie. grade6_counts %&gt;% select ( school = school_name, county, enrolled) %&gt;% arrange ( desc(enrolled)) %&gt;% head(3) school county enrolled MARC T ATKINSON MIDDLE SCHOOL MARICOPA 422 ESTRELLA MIDDLE SCHOOL MARICOPA 406 KYRENE APRENDE MIDDLE SCHOOL MARICOPA 364 4.2.3 filter to pick out rows This is one place where the Excel terminology carries over to R. There is a whole chapter on filtering – it can get quite sophisticated – but just remember that it is much more picky than you’re accustomed to. The computer sees MARICOPA as a completely different word than Maricopa, for example. Use two equals sign to test for a match (==) : and they have to match exactly. grade6_counts %&gt;% select (school_name, enrolled) %&gt;% filter ( school_name == &quot;AMPHITHEATER MIDDLE SCHOOL&quot;) school_name enrolled AMPHITHEATER MIDDLE SCHOOL 295 4.3 group_by and summarise to count and sum The group_by and summarise command is just like a pivot table, but it has a lot more power when you get to know it. At its simplest, it does just what a pivot table does: group_by puts each row into categories, such as the school types above. summarise calculates summary statistics such as counts – or n() – and sums: grade6_counts %&gt;% filter ( county == &quot;MARICOPA&quot;) %&gt;% group_by ( school_type ) %&gt;% summarise ( sum (enrolled), n() ) school_type sum(enrolled) n() CHARTER 9091 124 PRIVATE 1808 41 PUBLIC 45654 434 4.4 mutate to calculate something new The verb mutate means to take old information and turn it into a new column. The most obvious example in this data is to get the schools with the lowest immunization rates: grade6_counts %&gt;% mutate (pct_immune = (num_immune_mmr / enrolled) * 100) %&gt;% arrange (pct_immune) %&gt;% select (school_name, pct_immune, num_immune_mmr, enrolled) %&gt;% head(10) school_name pct_immune num_immune_mmr enrolled SHEPHERD OF THE DESERT LUTHERAN SCHOOL 47.82609 11 23 WELLTON ELEMENTARY SCHOOL 56.00000 14 25 MOUNTAIN OAK CHARTER SCHOOL 59.09091 13 22 DESERT STAR COMMUNITY SCHOOL 60.86957 14 23 KINDERTOTS 60.86957 14 23 DESERT MARIGOLD SCHOOL 64.28571 18 28 PATHFINDER ACADEMY 66.66667 30 45 SAINT AGNES CATHOLIC SCHOOL 66.66667 18 27 TRINITY CHRISTIAN SCHOOL 66.66667 14 21 PINE FOREST CHARTER SCHOOL 69.23077 18 26 Note that the percentage has to be multiplied by 100 – there is no simple formatting that will keep the numbers in tact the way there was in Excel. Don’t worry about the ugly numbers for now – you’ll see ways to improve on that later. 4.5 join to merge tables together by column; union to add rows Sometimes you need to apply information from one data frame to another. In most computer languages, this is called “joining”. Some examples include : Adding demographics to geographic information, such as county level data, from Census Converting codes to words, such as Zip Code to town name. Finding rows that match across two data frames, such as contributors to a campaign and contractors. (This is often hard) Creating standardization tables to fix spelling and other issues in an existing dataset. Linking information from one unit of analysis (say, companies) to another (say, inspections or violations) See the chapter on joining for more details. For now, just knowing it exists is all you need. Sometimes you need to combine two datasets by stacking one on top of the other. These are called set operations and are done with some form of union. We’ll get to that later. "],
["031-select-filter.html", "5 Verbs Part 1: Picking and choosing 5.1 Key takeaways 5.2 Select - choosing columns 5.3 Filter - choosing rows 5.4 Arrange - change the order 5.5 Traps 5.6 Resources", " 5 Verbs Part 1: Picking and choosing 5.1 Key takeaways Verb 1 - select to subset the data frame vertically (pick out / rename columns) Verb 2 - filter to subset the data frame horizontally (pick out rows) Verb 3 - arrange to display the data in a certain order Troubleshooting common error messages We’re going to use some standard ways to pick out information from a data frame using verbs: select and filter. Don’t forget to load the tidyverse! library(tidyverse) This tutorial uses data that was downloaded in 2019 from the Tempe, Ariz., Open data site. It’s since been removed. It contains a list of opioid-related EMS calls for the city. There was virtually no documentation on the site to explain the variables. (Tempe officials have said that they are planning to republish it with less detail.) my_link &lt;- &quot;https://cronkitedata.github.io/cronkite-docs/assets/data/csv/opioidemscalls.csv&quot; #use it in a read_csv command opioid_calls_orig &lt;- read_csv(my_link) Once read in, the dataset has 650 rows and 21 columns: 5.2 Select - choosing columns In Excel, we never had the opportunity of just pulling little cuts of our data vertically – we could filter the rows, but not the columns. The “select” verb picks out COLUMNS of your data, and allows you to rename at the same time. Note that R is case-sensitive, meaning that the variable named Age is not the same thing as the variable named age. This is one reason rename columns using a common pattern – you don’t have to think about it again. It’s also useful to remove spaces and special characters from your column names, which are difficult to reference with them. This code chunk selects only some of the variables from our original data frame and saves them in a new data frame: opioid_calls &lt;- #create a new data frame, &quot;opioid_calls&quot; opioid_calls_orig %&gt;% #start with the old data frame and then.. select (id = OBJECTID, #pick out only some columns, and change their names at the same time incident_date = IncidentDate, dow = Day_of_Week_Sort, narcan = `Narcan/Naloxone Given`, #you have to use back-ticks for special characters impression = Primary_Impression, age = Age, gender = Patient_Gender, asu_yn = Is_ASU_student, vet_yn = Is_Veteran, homeless_yn = Is_Homeles, special_population = Spec_Pop ) Here’s what it the first few rows of our selected columns looks like. (It might be chopped of on the right in your browser.) id incident_date dow narcan impression age gender asu_yn vet_yn homeless_yn special_population 2 1/3/2017 11:42 (2) Tuesday No Alcohol Intoxication (F10.9) 40 to 44 Female No No No No 3 1/9/2017 1:08 (1) Monday Yes ALOC (R41.82) 40 to 44 Male No No No No 4 1/9/2017 1:55 (1) Monday No No Apparent Illness or Injury (Z71.1) 20 to 24 Male No No Yes Homeless Optional: Other ways to select R has a lot of shortcuts so you don’t have to type as much as in some other languages. You can identify columns by their position in the file, by the kind of data they hold (numbers, characters, etc.), or by the words their names contain. Here’s an example: opioid_calls %&gt;% select ( id, weekday = dow, narcan : gender, #vars narcan through gender in the list contains (&quot;yn&quot;) # has &quot;yn&quot; in the name ) 5.3 Filter - choosing rows *Filter** is the verb you use to choose which rows are included in your output. Use comparison operators to choose the rows that meet certain conditions. The ones you’ll usually use are: == equals &gt; Is more than &lt; Is less than %in% Is in a list of values != does NOT equal Connect them with logical operators, including: | &quot;Or&quot; -- think of it as &quot;this or that&quot; &amp; &quot;And&quot; -- both things must be true “==” isn’t “=” ! You always need two equals signs for comparison. A single = sign is used to assign something to another value. 5.3.1 One filter If you don’t create a new data frame using the &lt;- assignment, it will just print out on the screen. Use the “glimpse” verb to take a peek at it vertically in a way the fits on the screen. Put the name of the column on the left side of the comparison, connect it with two equal signs, and put the value you want to look for (in quotes if it’s text) on the right. The two equal signs means that it must be EXACTLY the same – not sort of the same – including upper and lower case. opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; ) %&gt;% glimpse ## Observations: 370 ## Variables: 11 ## $ id &lt;dbl&gt; 3, 7, 11, 12, 13, 18, 20, 21, 25, 29, 30, 34, 35, 39, 40, 41, 43, 44, 48, 51, 52, 56, 61, … ## $ incident_date &lt;chr&gt; &quot;1/9/2017 1:08&quot;, &quot;1/11/2017 11:10&quot;, &quot;1/14/2017 22:51&quot;, &quot;1/15/2017 6:56&quot;, &quot;1/16/2017 15:54&quot;… ## $ dow &lt;chr&gt; &quot;(1) Monday&quot;, &quot;(3) Wednesday&quot;, &quot;(6) Saturday&quot;, &quot;(7) Sunday&quot;, &quot;(1) Monday&quot;, &quot;(7) Sunday&quot;, &quot;… ## $ narcan &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;,… ## $ impression &lt;chr&gt; &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.82)&quot;, &quot;Overdose- Intentional (T50.902A)&quot;, &quot;AL… ## $ age &lt;chr&gt; &quot;40 to 44&quot;, &quot;80 to 84&quot;, &quot;35 to 39&quot;, &quot;40 to 44&quot;, &quot;30 to 34&quot;, &quot;15 to 19&quot;, &quot;45 to 49&quot;, &quot;30 to… ## $ gender &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Mal… ## $ asu_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;… ## $ vet_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;Unknow… ## $ homeless_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown… ## $ special_population &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;, &quot;Veteran&quot;, &quot;No&quot;, &quot;Un… Here are the pieces of that function: In this case, you know that there were 370 rows that met your condition. It looks right – all of the narcan items that we can see are “Yes”. 5.3.2 A compound filter Filter for more than one condition that must be true using the “and” operator: &amp;. opioid_calls %&gt;% filter (narcan == &quot;Yes&quot; &amp; asu_yn == &quot;Yes&quot;) 5.3.3 Even more compound filters OR conditions Say we want either asu OR veterans who got Narcan. Here’s a query that combines the and (&amp;) condition with an or (|) condition: opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; &amp; (asu_yn == &quot;Yes&quot; | vet_yn == &quot;Yes&quot; ) ) %in% conditions Use the operator %in% when you want to pick among several possible answers. Say I want to look at anyone aged 20 to 29. Instead of “or”, I can use %in% because it’s only one column: opioid_calls %&gt;% filter (age %in% c(&quot;20 to 24&quot;, &quot;25 to 29&quot;)) 5.4 Arrange - change the order “Arrange” is the equivalent of “Sort” in a spreadsheet - it’s more precise in its meaning, and instructs R to re-arrange the rows of a data frame using the order identified in one or more columns. Try to piece together what this does: opioid_calls %&gt;% select (dow, narcan, age, gender, asu_yn) %&gt;% filter (dow %in% c(&quot;(6) Saturday&quot;, &quot;(7) Sunday&quot;) &amp; narcan == &quot;Yes&quot;) %&gt;% arrange ( age ) dow narcan age gender asu_yn (7) Sunday Yes 15 to 19 Male Unknown (7) Sunday Yes 15 to 19 Male Yes (6) Saturday Yes 15 to 19 Male No (6) Saturday Yes 15 to 19 Female Unknown (6) Saturday Yes 15 to 19 Male No (7) Sunday Yes 15 to 19 Female Unknown (6) Saturday Yes 15 to 19 Female Unknown (7) Sunday Yes 15 to 19 Male No (6) Saturday Yes 15 to 19 Female No (6) Saturday Yes 20 to 24 Female Unknown (7) Sunday Yes 20 to 24 Male No (6) Saturday Yes 20 to 24 Male No (7) Sunday Yes 20 to 24 Female Unknown (6) Saturday Yes 20 to 24 Male Unknown (6) Saturday Yes 20 to 24 Male No (6) Saturday Yes 20 to 24 Male Unknown (7) Sunday Yes 20 to 24 Male No (6) Saturday Yes 20 to 24 Male No (6) Saturday Yes 20 to 24 Female No (6) Saturday Yes 20 to 24 Male No (6) Saturday Yes 20 to 24 Male Yes (6) Saturday Yes 20 to 24 Male No (7) Sunday Yes 20 to 24 Female Unknown (7) Sunday Yes 20 to 24 Female Unknown (6) Saturday Yes 20 to 24 Male No (7) Sunday Yes 20 to 24 Female No (7) Sunday Yes 25 to 29 Female No (7) Sunday Yes 25 to 29 Female Unknown (6) Saturday Yes 25 to 29 Female Unknown (7) Sunday Yes 25 to 29 Female No (7) Sunday Yes 25 to 29 Female No (6) Saturday Yes 25 to 29 Male Unknown (6) Saturday Yes 25 to 29 Male Unknown (7) Sunday Yes 25 to 29 Female No (6) Saturday Yes 25 to 29 Male Unknown (7) Sunday Yes 25 to 29 Male No (6) Saturday Yes 25 to 29 Male Unknown (6) Saturday Yes 25 to 29 Male No (6) Saturday Yes 25 to 29 Female No (6) Saturday Yes 25 to 29 Male No (7) Sunday Yes 25 to 29 Male No (7) Sunday Yes 25 to 29 Male No (7) Sunday Yes 25 to 29 Female No (6) Saturday Yes 25 to 29 Male No (7) Sunday Yes 25 to 29 Male No (6) Saturday Yes 25 to 29 Male No (6) Saturday Yes 25 to 29 Male No (7) Sunday Yes 25 to 29 Female No (6) Saturday Yes 25 to 29 Male No (7) Sunday Yes 25 to 29 Male No (7) Sunday Yes 25 to 29 Male Unknown (7) Sunday Yes 25 to 29 Male Unknown (7) Sunday Yes 30 to 34 Male Unknown (6) Saturday Yes 30 to 34 Male Unknown (6) Saturday Yes 30 to 34 Male No (7) Sunday Yes 30 to 34 Male No (6) Saturday Yes 30 to 34 Female No (7) Sunday Yes 30 to 34 Male No (6) Saturday Yes 30 to 34 Male No (7) Sunday Yes 30 to 34 Female No (7) Sunday Yes 30 to 34 Male No (6) Saturday Yes 30 to 34 Male No (6) Saturday Yes 35 to 39 Female No (7) Sunday Yes 35 to 39 Female No (7) Sunday Yes 35 to 39 Male Unknown (6) Saturday Yes 35 to 39 Male No (7) Sunday Yes 35 to 39 Male No (7) Sunday Yes 35 to 39 Unknown (Unable to Determine) No (6) Saturday Yes 35 to 39 Male Unknown (6) Saturday Yes 35 to 39 Male No (6) Saturday Yes 35 to 39 Female No (7) Sunday Yes 35 to 39 Female No (7) Sunday Yes 40 to 44 Male No (6) Saturday Yes 40 to 44 Male No (7) Sunday Yes 40 to 44 Female No (7) Sunday Yes 40 to 44 Male No (6) Saturday Yes 40 to 44 Male No (6) Saturday Yes 40 to 44 Male Unknown (7) Sunday Yes 40 to 44 Male Unknown (7) Sunday Yes 40 to 44 Female No (6) Saturday Yes 40 to 44 Male No (6) Saturday Yes 40 to 44 Male N/A (6) Saturday Yes 40 to 44 Female No (7) Sunday Yes 45 to 49 Female No (7) Sunday Yes 45 to 49 Female No (6) Saturday Yes 45 to 49 Female No (6) Saturday Yes 45 to 49 Male Unknown (7) Sunday Yes 45 to 49 Female No (6) Saturday Yes 45 to 49 Female No (6) Saturday Yes 45 to 49 Male Unknown (7) Sunday Yes 45 to 49 Male No (6) Saturday Yes 45 to 49 Male Unknown (7) Sunday Yes 50 to 54 N/A No (7) Sunday Yes 50 to 54 Male Unknown (6) Saturday Yes 50 to 54 Female Unknown (6) Saturday Yes 50 to 54 Male No (7) Sunday Yes 50 to 54 Female No (7) Sunday Yes 50 to 54 Female No (7) Sunday Yes 55 to 59 Male No (6) Saturday Yes 55 to 59 Male Unknown (6) Saturday Yes 55 to 59 Male No (7) Sunday Yes 55 to 59 Male No (7) Sunday Yes 60 to 64 Male No (6) Saturday Yes 60 to 64 Male No (7) Sunday Yes 60 to 64 Male No (7) Sunday Yes 60 to 64 Male No (6) Saturday Yes 60 to 64 Female No (7) Sunday Yes 60 to 64 Female Unknown (7) Sunday Yes 65 to 69 Male No (7) Sunday Yes 65 to 69 Male Unknown (6) Saturday Yes 70 to 74 Female No (6) Saturday Yes 70 to 74 Female No (6) Saturday Yes 70 to 74 Female No (6) Saturday Yes 75 to 79 Male No (6) Saturday Yes 80 to 84 Male No (7) Sunday Yes 95 to 99 Male No (Reminder: the c() operator makes a list – it combines the two quoted values into a vector.) 5.5 Traps Case-sensitivity R is always case-sensitive, which means that it makes a difference whether an object, a column name or the value of a variable (like Male) is upper-case, lower-case or some proper case. For example: opioid_calls %&gt;% filter (narcan == &quot;yes&quot;) id incident_date dow narcan impression age gender asu_yn vet_yn homeless_yn special_population .. results in 0 cases, because narcan is shown as “Yes”, not as “yes”. Instead, match the case to what you have in your data. Equals versus double-equals You’ll get this weird error if you try to use an equals sign as a comparison operator: filter(opioid_calls, narcan = &quot;Yes&quot;) ## Error: `narcan` (`narcan = &quot;Yes&quot;`) must not be named, do you need `==`? Note that R is guessing that you meant “==” instead. It won’t always be so kind. The “and then” operator (%&gt;%) You also get a weird error if you forget to string together commands with the %&gt;% connector. A code chunk that looks like this: filter (opioid_calls, narcan == &quot;Yes&quot;) arrange (dow) will result in the error that says, Error in arrange(dow) : object &#39;dow&#39; not found It doesn’t make much sense, except it’s telling you that it is no longer finding a field called dow. It’s done the filter and thinks it was finished because there was no AND THEN connector. Then it tries to run another command, but it’s starting from scratch without a data frame to work from. This is really common and a pain. R thought you had TWO things you wanted to do – one is just the filter, the other is an error. The fix is to put the %&gt;% after the filter. The dreaded NA Missing information is recorded in R as NA. The problem is, this isn’t a value at all – it will never match anything, will never be bigger or smaller than anything, and will be ignored if you sort on it. We’ll come back to this, but just remember that it’s a problem. 5.6 Resources 5.6.1 Exercises You have read “The Serial Killer Detective”, from the New Yorker, profiling Hargrove’s attempt to get better murder data than the government has available. I have taken the data from that project and converted it into an R data object that includes only murders in the West. 5.6.2 Tutorials “Teaching R” videos. They’re a little more detailed than we need, but it’s a useful review of most of what we’ve done. Andrew Ba Tran’s “Lesson 3: Wrangling data” from the R for Journalists (learn-r) website. You can watch the videos and take the quizzes without following along on your computer. Matt Waite’s chapter on filters – note that it has a verb we haven’t looked at yet, called “mutate” Data School “Faster data maipulation with dplyr”, which is a little more in-depth than we need but is easy to follow. "],
["033-groupby.html", "6 Verbs Part 2: group_by and summarise 6.1 Key takeaways 6.2 group_by / summarise2 basics 6.3 Restructuring for a report with pivot_wider() 6.4 Resources &amp; exercises", " 6 Verbs Part 2: group_by and summarise 6.1 Key takeaways group_by and summarise are the R equivalent to Excel’s pivot tables Together, they’re usually used to answer questions like “how many?” and “how much?”. You will rarely use group_by without summarise. group_by is picky - it will create a separate answer for every variant of a category: “Lettuce” could be one, and “lettuce” could be another. Rolling up your totals to allow for percentage changes Rearranging your data for easier reading with pivot_wider This continues with the Arizona immunization data from chapter 4 and assumes you’ve gone through that chapter. It uses some of the other verbs introduced there. If you’ve started a new project, you can re-download the data in R form, and the load it in an R Markdown code chunk with this line: load(&quot;az-immunizations-grade6.Rda&quot;) (Be sure to preface it with a subfolder name if you’ve saved it in one.) When you run your first code chunk you should have a data frame called grade6_counts in your environment tab: 6.2 group_by / summarise2 basics Think of grouping as making piles of things while summarise counts, adds or creates other summary statistics. Where filtering and selecting let you hone in on individual items that meet specific criteria, grouping and summarising help you answer the questions of “how many?” and “how much?” They’re the equivalent to pivot tables in Excel. Reporters use grouping to: Focus further reporting on categories with particular characteristics, like neighborhoods with the most home loan rejections, or families who contributed the most to political candidates. Produce summary statistics for use in stories, such as the number of complaints by type of business or the number of c-sections by hospital or doctor. Test data they receive from government and others for errors, such as missing codes, impossible combinations, sudden and suspicious patterns or incorrect totals when checked against an independent source. To refresh your memory, this query counts the number of schools and adds up the number of students by type of school while giving them descriptive names: grade6_counts %&gt;% group_by (school_type) %&gt;% summarise ( schools = n() , student = sum (enrolled, na.rm=TRUE) ) Notice the na.rm=TRUE in the sum() function. You should almost always add this to any summary math function, like sum(), median(), mean(), etc. If you don’t, a single missing value (NA) will result in an answer of NA. That’s good practice and it makes sense: you should want to know if your data has missing or invalid information. But normally you have no choice but to ignore it. 6.2.1 Other summary functions Counting and summing are the most common, but you might also use these functions: Function description n_distinct () the number of unique values of the variable you name median () , mean() The median or mean of a numeric variable min() , max() Just what it looks like 6.2.2 Grouping by more than one variable An example of counting by school type, and whether a school nurse is on staff: grade6_counts %&gt;% group_by ( school_type, school_nurse) %&gt;% summarise ( num_schools = n() ) school_type school_nurse num_schools CHARTER NO 169 CHARTER YES 24 PRIVATE NO 32 PRIVATE YES 35 PUBLIC NO 240 PUBLIC YES 408 It produces every combination of the school_type and school_nurse. 6.2.3 Rolling up to the next level If you wanted to know what percent of schools are charter, you’d need the total number of schools as a variable in your data frame. You can roll up to the next level this way: grade6_counts %&gt;% group_by( school_type ) %&gt;% summarise (schools = n() ) %&gt;% mutate ( total = sum( schools), pct_total = schools/ total * 100 ) %&gt;% arrange ( desc (schools)) school_type schools total pct_total PUBLIC 648 908 71.365639 CHARTER 193 908 21.255507 PRIVATE 67 908 7.378855 A note on count() and tally() You may see other tutorials in which the group_by / summarise is shortened to use two other verbs, tally() and count(). They’re perfectly good for a very quick review of the data, but it’s a little hard to follow how they work. For now, sticking with the group_by / summarise sequence will help you cement it in your mind while at the same time making it closer to what you’ll find in other programming languages. When you get further along, you’ll notice that count() is really useful to isolate lines that could be duplicates. 6.3 Restructuring for a report with pivot_wider() It’s hard to read multi-level groupings, so the tidyverse offers a way to spread one variable across the top with the other down the side. This is just like dragging one column into the “Columns” area in a pivot table, and another into the “Rows”. Here is how you’d make a crosstab like those in Excel using this method: Here’s a full example of creating “column” percentages and then showing them as a crosstab. See if you can piece together what’s going on. If not, try moving pieces of the query outside the code chunk (and remove your %&gt;% operator) and run it piece by piece. grade6_counts %&gt;% group_by (school_type, school_nurse) %&gt;% # See 1 summarise ( schools = n() ) %&gt;% mutate ( types = sum(schools), # See 2 pct_types = schools/types*100) %&gt;% # See 3 select (school_type, school_nurse, pct_types) %&gt;% pivot_wider ( names_from = school_type, values_from = pct_types) #See 4 school_nurse CHARTER PRIVATE PUBLIC NO 87.56477 47.76119 37.03704 YES 12.43523 52.23881 62.96296 Now you have a crosstab showing that public schools are five times as likely to have a school nurse as charter schools (63/12), and private schools are in between. Remember the rule: The independent variable, or the thing that comes first, is in your column and the thing that comes second is in your rows. Then calculate the column percentage Walking through this code: Do a usual group_by/summarise by the type of school and whether there are school nurses. The order matters, in order to get the right percentages. Calcuate the sum at the next level, which is by school type – this is a hidden feature of group_by, in that it rolls up sequentially through the variables you have grouped on – to get the total by school_nurse, then calcuate the percentage off of that. Keep only the variables you want to see in the end. pivot it! 6.3.1 A note on restructuring your data frames pivot_wider is part of a whole set of functions designed to work with tidy data, and fix untidy data. You’ll sometimes see it called spread, which is from an older version of the tidyverse, and is harder to understand. We’ll come back to some of this later on. 6.4 Resources &amp; exercises If you got through this, congratulations! You’ve mastered one of the things that people new to data analysis struggle find difficult to wrap their heads around. If you’re still unsure, don’t worry – many people are. Maybe some of these resources will help: Mary Jo Webster’s “Intro to analysis with Tidyverse” is a walkthrough aimed at group by / summarise. Go back to Pivot Tables in Excel - it’s the same thing. Susan Baert’s dplyr tutorial: summarizing data Matt Waite’s “Aggregates” chapter 6.4.1 Exercises Using one of the datasets you worked with in pivot tables, try to replicate at least some of your work in R. The tidyverse uses the British spelling of a lot of words. You can use the American spelling, but you’ll usually see it this way.↩ "],
["035-mutate.html", "7 Verbs Part 3: mutate 7.1 Key takeaways 7.2 Simple arithmetic 7.3 Creating categories with if_else() 7.4 Useful functions 7.5 Bonus: Fun with date and time 7.6 More resources", " 7 Verbs Part 3: mutate 7.1 Key takeaways mutate just means “compute”, or convert one or more variables into something new. mutate is the equivalent of creating a new column in Excel using a formula Some of the most important jobs of a mutate statement are: Convert unstandardized data into standardized, such as yes-or-no variables or all lower case Use arithmetic on numeric variables Use conditional statements to put different values on variables, instead of filtering one at a time. Change the data type from, say, text to date and time. Use functions to combine or pull apart and edit your data. 7.1.1 Read in some data Start with the Arizona immunization data that some other chapters have worked with, loading it and the tidyverse to follow along. Here are the packages and data used for this chapter. You might need to install some of them. library(tidyverse) library(knitr) # used for slightly better looking tables library(DT) # even more options with tables library(lubridate) # used for working with dates library(janitor) # used to clean up dirty data and change column names. load(&quot;data/az-immunizations-grade6.Rda&quot;) # you may need to change the path to wherever you saved the data 7.2 Simple arithmetic Use the usual arithmetic operators to calculate numbers and create a new column: + Addition - Subtraction * Multiplication / Division This example creates a new data frame called immune_pct from a few columns of the original: immune_pct &lt;- grade6_counts %&gt;% select ( school_name, city, school_type, enrolled, num_immune_mmr) %&gt;% mutate (pct_immune = ( num_immune_mmr/enrolled) * 100) Here’s what it looks like: school_name city school_type enrolled num_immune_mmr pct_immune ABRAHAM LINCOLN TRADITIONAL SCHOOL PHOENIX PUBLIC 59 58 98.3 ACACIA ELEMENTARY SCHOOL PHOENIX PUBLIC 134 134 100.0 ACADEMY DEL SOL - HOPE TUCSON CHARTER 53 52 98.1 ACADEMY OF MATH AND SCIENCE TUCSON CHARTER 42 40 95.2 ACADEMY OF MATH AND SCIENCE CAMELBACK PHOENIX CHARTER 113 113 100.0 7.3 Creating categories with if_else() Sometimes, you want to create categories out of more detailed information. In this case, a threshold of 90 percent immunization is considered the limit under which there is a threat of a measles outbreak, also known as “herd immunity”. To categorize each schools as above or under that level, we need to create a new variable that is based on the value of the percentage we just calcluated. That’s done using an if_else statement, which is in the form: if_else ( condition, new value if it&#39;s true, new value if it&#39;s not true) For example: immune_pct &lt;- immune_pct %&gt;% mutate ( threshold_met = if_else ( pct_immune &gt;= 90, &quot;Meets threshold&quot;, &quot;Below threshold&quot;) ) Now we can do some grouping by the new categories: immune_pct %&gt;% group_by (school_type, threshold_met) %&gt;% summarise ( school_ct = n(), enrolled = sum(enrolled)) You can practice rolling up by looking at the percent by type. immune_pct %&gt;% group_by (school_type, threshold_met) %&gt;% summarise ( schools = n(), students = sum(enrolled)) %&gt;% mutate ( pct_school_type = schools / sum(schools, na.rm=TRUE) * 100, pct_enrolled = students / sum(students, na.rm=TRUE) * 100 ) %&gt;% filter ( threshold_met == &quot;Below threshold&quot;) school_type threshold_met schools students pct_school_type pct_enrolled CHARTER Below threshold 40 2344 20.725389 17.757576 PRIVATE Below threshold 10 324 14.925373 12.053571 PUBLIC Below threshold 18 1223 2.777778 1.794544 You can read this table to say, “More than one-sixth of 6th-grade charter school students could be at risk of contracting measles because their schools have immunization rates below levels experts say are needed to prevent outbreaks.” (The wording is tough here to avoid saying “schools” over and over! ) This strategy can also be used to set unreal values to the special NA as in the MAP murder data that uses the value 999 instead of “unknown” for an age. This is common in survey data. 7.4 Useful functions Here are some functions you may find yourself using pretty regularly. I’m not going to go into the details, but think about looking some up if you think you need them. In each case, these are just the verbs. You’d put your noun – an existing variable from your data frame – within the parentheses. tolower( ) , toupper ( ), toproper ( ): Convert to all lower, all upper, or proper case. paste ( ), paste0 ( ) : Combine (eg, concatenate) two character variables into one, with a delimiter like a space, or smushed together (paste0) na_if( ), replace_na () : The first creates NA values if something is true; the other replaces NA values with something else, such as a zero. recode () : Lets you set up a system to replace codes with words. Conversion functions: as.character(), as.integer(), as.numeric() and as.double() 7.5 Bonus: Fun with date and time Sometimes your data came to you as text, but you need to treat it as numbers. In journalism, we’re often trying to work with dates that came to us in some non-standard form. This is called changing the data type. 3 This example comes from the opioid emergency call data shown in earlier chapters. my_link &lt;- &quot;https://cronkitedata.github.io/cronkite-docs/assets/data/csv/opioidemscalls.csv&quot; #use it in a read_csv command opioid_calls_orig &lt;- read_csv(my_link) opioid_calls &lt;- opioid_calls_orig %&gt;% clean_names() %&gt;% select (objectid, incident_date_char = incident_date, narcan= narcan_naloxone_given, is_asu_student, is_homeless=is_homeles) glimpse( opioid_calls) ## Observations: 650 ## Variables: 5 ## $ objectid &lt;dbl&gt; 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26… ## $ incident_date_char &lt;chr&gt; &quot;1/3/2017 11:42&quot;, &quot;1/9/2017 1:08&quot;, &quot;1/9/2017 1:55&quot;, &quot;1/9/2017 10:23&quot;, &quot;1/9/2017 17:59&quot;, &quot;1… ## $ narcan &lt;chr&gt; &quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;… ## $ is_asu_student &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, … ## $ is_homeless &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;… The date and time in this dataset is a character field, but we want to convert it to a date field and a separate time field. At first, we might just want to get the date value out of the character string. It’s in the form month/day/year hour:minute, so we can use the lubridate::mdy_hm function [When you see a function preceded by two colons as this one does, the author is showing you which package it comes from. In this case, the lubridate package, which you must install before you can use it, has a function mdy_hm.]. This function tries to guess how the character string is formatted: opioid_calls %&gt;% mutate ( incident_date = mdy_hm(incident_date_char)) %&gt;% select (incident_date, incident_date_char:is_homeless) %&gt;% glimpse() ## Observations: 650 ## Variables: 5 ## $ incident_date &lt;dttm&gt; 2017-01-03 11:42:00, 2017-01-09 01:08:00, 2017-01-09 01:55:00, 2017-01-09 10:23:00, 2017-… ## $ incident_date_char &lt;chr&gt; &quot;1/3/2017 11:42&quot;, &quot;1/9/2017 1:08&quot;, &quot;1/9/2017 1:55&quot;, &quot;1/9/2017 10:23&quot;, &quot;1/9/2017 17:59&quot;, &quot;1… ## $ narcan &lt;chr&gt; &quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;… ## $ is_asu_student &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, … ## $ is_homeless &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;… Notice that the new variable is of the type , which refers to a date-time combined variable. Let’s say I want to distinguish weekends from weekdays in this dataset. First, we have to define weekend. Here’s one definition, but you might want to use another: A weekend begins at 3pm on Friday and ends at 6pm on Sunday. (The hour variable is in military time.). Instead of using if_else, this example uses case_when, which lets you choose among a variety of options, not just two. opioid_calls %&gt;% mutate (incident_date = mdy_hm(incident_date_char), day_of_week = wday(incident_date) , weekday = weekdays(incident_date), hour = hour(incident_date), weekend = case_when ( day_of_week == 7 ~ &quot;Yes&quot;, day_of_week == 6 &amp; hour &gt;= 15 ~ &quot;Yes&quot;, day_of_week == 1 &amp; hour &lt;= 18 ~ &quot;Yes&quot;, TRUE ~ &quot;No&quot; ) ) %&gt;% #use count() instead of group_by / summarise. Same thing in this context. count (day_of_week, weekend, weekday) %&gt;% pivot_wider (values_from = n, names_from = weekend, values_fill= list(n=0)) day_of_week weekday No Yes 1 Sunday 19 80 2 Monday 78 0 3 Tuesday 87 0 4 Wednesday 87 0 5 Thursday 102 0 6 Friday 53 41 7 Saturday 0 103 7.6 More resources As always, other professors have done similar exercises: Matt Waite’s chapter on “mutate”, which includes a recipe for combining character variables into phrases TK: Exercises This example uses the library lubridate, which may not be installed in your computer. If you’re following along, you may need to install it in the console.↩ "],
["036-joins.html", "8 Verbs Part 4: Combining data 8.1 Key takeaways 8.2 Concepts of joining 8.3 Arizona immunization data 8.4 Resources", " 8 Verbs Part 4: Combining data You’ll often find yourself attempting to put together two or more data sets. To add combine columns – getting more variables – use one of the join functions. To add rows – stacking datasets – use bind_rows(). This tutorial only addresses combining columns. Reporters use joins to: Add information from one table, such demogrphics, to another, such as a list of counties. Use “lookup tables” from more traditional databases, which list codes that match to a dictionary of other values. For example, campaign finance data usually comes with a committee ID in donation datasets. Those ID’s match to details on a candidate or political action committee in another. Link a standardized list of names to link back to an unstandardized datasets. Match one set of records against a completely different one to find potential stories. Some of the most famous data journalism investigations used this kind of join to find, for example, school bus drivers who have DUI’s or daycare centers run by people with serious criminal histories. 8.1 Key takeaways Combining two tables requires exact matches on one or more variables. Close matches don’t count. Whenever you can get codes to go with your data, get them – you never know when you’ll run across another dataset with the same code. You can use information from one table to learn more about another, especially when you have geographic information by county, Census tract or zip code. For example, you might combine the number of murders in a county with its population to create a murder rate. Many public records databases come with “lookup tables”. Be sure to request them so you can match a code, such as “G” to its translation, such as “Great!” 8.1.1 Adding rows instead of columns Joining only adds columns (or variables) to your data. If you need to stack tables on top of each other, use the bind_rows(data frame 1, data frame 2) function. 8.2 Concepts of joining In R, as in most other language, “joins” work by matching one table against another using a common variable. For example, the Federal Election Commission holds information about donors in one data frame, and information about candidates and other political action committees in another. They link together using the common identifier of a committee ID. Campaign finance join Campaign finance join (They don’t need to have the same name, and they don’t need to be in the first column.) The key is that the donor data includes the many donations to any given candidate, but the committee table only lists each political group once. Even in this example, although Martha McSally and Kyrsten Sinema are listed twice, there are for two separate political entities. The reason to do this is that you never have to worry that any changes to the candidate information – the treasurer, the address or the office sought – carries over to the donation. It’s only listed once, in the lookup table. Most large databases are constructed this way. For example: Your school records are held using your student ID, which means that your address only needs to be changed once, not in every class or in every account you have with the school. An inspection record typically has three tables: An establishment (like a restaurant or a workplace), an inspection, and a violation. They’re linked together using establishment ID’s. A court database usually has many types of records: A case record, a list of charges, sentences and defendants. Think back on the work we did to identify a unit of analysis. All of these databases have different tables, or data frames, for each unit of analysis. There two kinds of joins you’ll most frequently use are: inner_join: Only matching rows are kept. Anything without a match is dropped. These are usually used in databases built with joining in mind. left_join : Keep everything from the first table listed, drop anything that doesn’t match from the second one, which you’ll use when you need to join tables that come from different agencies or systems, and you’re not sure you’ll have a good match. 8.3 Arizona immunization data I matched up the information from most of the public and charter schools in Arizona against Department of Education statistics to find their federal ID numbers. There are two tables that have to be matched against one another: The immunization statistics by school, and the National Center for Education Statistics characteristics. They are both saved in the R dataset called immune_to_nces.Rda, which you can add to your environment using the load() command. There are 2,414 schools in the NCES database, but only 841 schools in the immunizations because we’ve only kept schools that had students in Grade 6. There were seven schools that I couldn’t find in the NCES data, and their IDs are blank. Here are their variables: glimpse(grade6_to_nces) ## Observations: 841 ## Variables: 17 ## $ rowid &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26,… ## $ nces_id &lt;chr&gt; &quot;040906000652&quot;, &quot;040906000915&quot;, &quot;040079703230&quot;, &quot;040036802037&quot;, &quot;040094003499&quot;, &quot;040089103… ## $ school_name &lt;chr&gt; &quot;ABRAHAM LINCOLN TRADITIONAL SCHOOL&quot;, &quot;ACACIA ELEMENTARY SCHOOL&quot;, &quot;ACADEMY DEL SOL - HOPE&quot;… ## $ address &lt;chr&gt; &quot;10444 N 39TH AVE&quot;, &quot;3021 W EVANS DR&quot;, &quot;7102 W VALLEY CREST PL&quot;, &quot;1557 W PRINCE RD&quot;, &quot;6633… ## $ city &lt;chr&gt; &quot;PHOENIX&quot;, &quot;PHOENIX&quot;, &quot;TUCSON&quot;, &quot;TUCSON&quot;, &quot;PHOENIX&quot;, &quot;PHOENIX&quot;, &quot;TUCSON&quot;, &quot;PHOENIX&quot;, &quot;PRES… ## $ county &lt;chr&gt; &quot;MARICOPA&quot;, &quot;MARICOPA&quot;, &quot;PIMA&quot;, &quot;PIMA&quot;, &quot;MARICOPA&quot;, &quot;MARICOPA&quot;, &quot;PIMA&quot;, &quot;MARICOPA&quot;, &quot;YAVAP… ## $ zip_code &lt;chr&gt; &quot;85051&quot;, &quot;85053&quot;, &quot;85757&quot;, &quot;85705&quot;, &quot;85033&quot;, &quot;85017&quot;, &quot; NA&quot;, &quot;85033&quot;, &quot; NA&quot;, &quot;85202&quot;, … ## $ school_nurse &lt;chr&gt; &quot;NO&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;YES&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;Y… ## $ school_type &lt;chr&gt; &quot;PUBLIC&quot;, &quot;PUBLIC&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHA… ## $ enrolled &lt;dbl&gt; 59, 134, 53, 42, 113, 56, 75, 44, 45, 106, 53, 87, 54, 31, 39, 77, 94, 128, 84, 64, 23, 52… ## $ num_immune_mmr &lt;dbl&gt; 58, 134, 52, 40, 113, 55, 73, 39, 44, 105, 46, 84, 54, 30, 39, 75, 92, 127, 84, 64, 22, 46… ## $ num_exempt_mmr &lt;dbl&gt; 1, 0, 1, 2, 0, 1, 2, 0, 1, 1, 7, 3, 0, 0, 0, 2, 2, 1, 0, 0, 1, 6, 16, 1, 6, 0, 17, 8, 3, 0… ## $ num_compliance_mmr &lt;dbl&gt; 59, 134, 53, 42, 113, 56, 75, 44, 45, 106, 53, 87, 54, 30, 39, 77, 94, 128, 84, 64, 23, 52… ## $ num_pbe &lt;dbl&gt; 5, 2, 1, 0, 3, 6, 4, 0, 23, 4, 9, 3, 1, 1, 0, 4, 0, 1, 0, 0, 1, 21, 27, 6, 16, 8, 31, 23, … ## $ num_medical_exempt &lt;dbl&gt; 2, 0, 0, 7, 0, 6, 0, 0, 0, 0, 1, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 3, 0, … ## $ num_pbe_exempt_all &lt;dbl&gt; 5, 0, 1, 0, 0, 0, 1, 0, 2, 1, 10, 3, 0, 0, 0, 2, 2, 1, 0, 0, 1, 4, 6, 1, 5, 0, 12, 3, 1, 0… ## $ match_type &lt;chr&gt; &quot;Yes&quot;, &quot;Manual&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Manual&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, … glimpse (nces_master) ## Observations: 2,414 ## Variables: 15 ## $ rowid &lt;int&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,… ## $ nces_school_id &lt;chr&gt; &quot;040553000451&quot;, &quot;040463000999&quot;, &quot;040010601892&quot;, &quot;040041701588&quot;, &quot;040673001433&quot;, &quot;040906000… ## $ nces_district_id &lt;chr&gt; &quot;0405530&quot;, &quot;0404630&quot;, &quot;0400106&quot;, &quot;0400417&quot;, &quot;0406730&quot;, &quot;0409060&quot;, &quot;0409060&quot;, &quot;0408850&quot;, &quot;0… ## $ nces_district_name &lt;chr&gt; &quot;Nogales Unified District&quot;, &quot;Marana Unified District&quot;, &quot;Arizona Agribusiness &amp; Equine Cent… ## $ nces_school_name &lt;chr&gt; &quot;A J MITCHELL ELEMENTARY SCHOOL&quot;, &quot;A. C. E.&quot;, &quot;AAEC - PARADISE VALLEY&quot;, &quot;AAEC - SMCC CAMPU… ## $ nces_school_type &lt;chr&gt; &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular… ## $ nces_urban &lt;chr&gt; &quot;33-Town: Remote&quot;, &quot;41-Rural: Fringe&quot;, &quot;11-City: Large&quot;, &quot;11-City: Large&quot;, &quot;13-City: Small… ## $ nces_student_ct &lt;dbl&gt; 406, 10, 313, 444, 517, 608, 868, 643, NA, 61, 59, 85, 519, 115, 83, 455, 807, 46, 280, 14… ## $ nces_fte_teacher &lt;dbl&gt; 20.50, 6.80, NA, NA, 25.60, 32.75, 45.87, 0.00, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA… ## $ nces_ratio &lt;dbl&gt; 19.80, 1.47, NA, NA, 20.20, 18.56, 18.92, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, NA, … ## $ nces_lowest &lt;chr&gt; &quot;Kindergarten&quot;, &quot;7th Grade&quot;, &quot;9th Grade&quot;, &quot;9th Grade&quot;, &quot;Kindergarten&quot;, &quot;Kindergarten&quot;, &quot;Ki… ## $ nces_highest &lt;chr&gt; &quot;5th Grade&quot;, &quot;12th Grade&quot;, &quot;12th Grade&quot;, &quot;12th Grade&quot;, &quot;5th Grade&quot;, &quot;8th Grade&quot;, &quot;6th Grad… ## $ nces_school_level &lt;chr&gt; &quot;Elementary&quot;, &quot;High&quot;, &quot;High&quot;, &quot;High&quot;, &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Elementar… ## $ nces_county_name &lt;chr&gt; &quot;Santa Cruz County&quot;, &quot;Pima County&quot;, &quot;Maricopa County&quot;, &quot;Maricopa County&quot;, &quot;Yavapai County&quot;… ## $ nces_fips &lt;chr&gt; &quot;04023&quot;, &quot;04019&quot;, &quot;04013&quot;, &quot;04013&quot;, &quot;04025&quot;, &quot;04013&quot;, &quot;04013&quot;, &quot;04019&quot;, &quot;04019&quot;, &quot;04019&quot;, … Setting up the data In this case, we want to get information that the federal government had on the schools attached to the immunization data. In particular, we’d like to be able to generate statistics by district, by urbanization and type of school, and we’d like to keep the code for the county so we can link it up to other datasets. To make it simple, I’ll just create a small set of data for each table: immune &lt;- grade6_to_nces %&gt;% select (rowid, nces_id, school_name, city, county, zip_code, school_nurse, school_type, enrolled, num_immune_mmr) school_list &lt;- nces_master %&gt;% select (nces_school_id, nces_district_id, nces_district_name, nces_school_type, nces_urban, nces_ratio, nces_school_level, nces_fips) Apply the join Here are two ways to join: immune %&gt;% inner_join (school_list, by=c(&quot;nces_id&quot; = &quot;nces_school_id&quot;)) %&gt;% glimpse ## Observations: 834 ## Variables: 17 ## $ rowid &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26,… ## $ nces_id &lt;chr&gt; &quot;040906000652&quot;, &quot;040906000915&quot;, &quot;040079703230&quot;, &quot;040036802037&quot;, &quot;040094003499&quot;, &quot;040089103… ## $ school_name &lt;chr&gt; &quot;ABRAHAM LINCOLN TRADITIONAL SCHOOL&quot;, &quot;ACACIA ELEMENTARY SCHOOL&quot;, &quot;ACADEMY DEL SOL - HOPE&quot;… ## $ city &lt;chr&gt; &quot;PHOENIX&quot;, &quot;PHOENIX&quot;, &quot;TUCSON&quot;, &quot;TUCSON&quot;, &quot;PHOENIX&quot;, &quot;PHOENIX&quot;, &quot;TUCSON&quot;, &quot;PHOENIX&quot;, &quot;PRES… ## $ county &lt;chr&gt; &quot;MARICOPA&quot;, &quot;MARICOPA&quot;, &quot;PIMA&quot;, &quot;PIMA&quot;, &quot;MARICOPA&quot;, &quot;MARICOPA&quot;, &quot;PIMA&quot;, &quot;MARICOPA&quot;, &quot;YAVAP… ## $ zip_code &lt;chr&gt; &quot;85051&quot;, &quot;85053&quot;, &quot;85757&quot;, &quot;85705&quot;, &quot;85033&quot;, &quot;85017&quot;, &quot; NA&quot;, &quot;85033&quot;, &quot; NA&quot;, &quot;85202&quot;, … ## $ school_nurse &lt;chr&gt; &quot;NO&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;YES&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;Y… ## $ school_type &lt;chr&gt; &quot;PUBLIC&quot;, &quot;PUBLIC&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHA… ## $ enrolled &lt;dbl&gt; 59, 134, 53, 42, 113, 56, 75, 44, 45, 106, 53, 87, 54, 31, 39, 77, 94, 128, 84, 64, 23, 52… ## $ num_immune_mmr &lt;dbl&gt; 58, 134, 52, 40, 113, 55, 73, 39, 44, 105, 46, 84, 54, 30, 39, 75, 92, 127, 84, 64, 22, 46… ## $ nces_district_id &lt;chr&gt; &quot;0409060&quot;, &quot;0409060&quot;, &quot;0400797&quot;, &quot;0400368&quot;, &quot;0400940&quot;, &quot;0400891&quot;, &quot;0400202&quot;, &quot;0400122&quot;, &quot;0… ## $ nces_district_name &lt;chr&gt; &quot;Washington Elementary School District&quot;, &quot;Washington Elementary School District&quot;, &quot;Academy… ## $ nces_school_type &lt;chr&gt; &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular… ## $ nces_urban &lt;chr&gt; &quot;11-City: Large&quot;, &quot;11-City: Large&quot;, &quot;21-Suburb: Large&quot;, &quot;11-City: Large&quot;, &quot;11-City: Large&quot;… ## $ nces_ratio &lt;dbl&gt; 18.56, 18.92, NA, NA, NA, NA, NA, NA, NA, 19.13, NA, 16.10, 10.73, 37.16, 27.39, 24.48, 17… ## $ nces_school_level &lt;chr&gt; &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Other&quot;, &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Middle&quot;, &quot;… ## $ nces_fips &lt;chr&gt; &quot;04013&quot;, &quot;04013&quot;, &quot;04019&quot;, &quot;04019&quot;, &quot;04013&quot;, &quot;04013&quot;, &quot;04019&quot;, &quot;04013&quot;, &quot;04025&quot;, &quot;04013&quot;, … You can see that the information from the federal Education Department was added to the immunization data, but we lost seven records – the seven that I couldn’t find in the federal department. To preserve these records, you’ll usually protect one of the tables – the one you care about most – and keep everything, even if it doesn’t match. To do that, use a left or right join, depending on whether you mention the table first or second. In this case: immune_joined &lt;- immune %&gt;% # the table I want to protect left_join ( school_list, # the table I want to apply to my original data frame by=c(&quot;nces_id&quot;=&quot;nces_school_id&quot;) ) # the variable that is the same in the two tables. glimpse(immune_joined) ## Observations: 841 ## Variables: 17 ## $ rowid &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 26,… ## $ nces_id &lt;chr&gt; &quot;040906000652&quot;, &quot;040906000915&quot;, &quot;040079703230&quot;, &quot;040036802037&quot;, &quot;040094003499&quot;, &quot;040089103… ## $ school_name &lt;chr&gt; &quot;ABRAHAM LINCOLN TRADITIONAL SCHOOL&quot;, &quot;ACACIA ELEMENTARY SCHOOL&quot;, &quot;ACADEMY DEL SOL - HOPE&quot;… ## $ city &lt;chr&gt; &quot;PHOENIX&quot;, &quot;PHOENIX&quot;, &quot;TUCSON&quot;, &quot;TUCSON&quot;, &quot;PHOENIX&quot;, &quot;PHOENIX&quot;, &quot;TUCSON&quot;, &quot;PHOENIX&quot;, &quot;PRES… ## $ county &lt;chr&gt; &quot;MARICOPA&quot;, &quot;MARICOPA&quot;, &quot;PIMA&quot;, &quot;PIMA&quot;, &quot;MARICOPA&quot;, &quot;MARICOPA&quot;, &quot;PIMA&quot;, &quot;MARICOPA&quot;, &quot;YAVAP… ## $ zip_code &lt;chr&gt; &quot;85051&quot;, &quot;85053&quot;, &quot;85757&quot;, &quot;85705&quot;, &quot;85033&quot;, &quot;85017&quot;, &quot; NA&quot;, &quot;85033&quot;, &quot; NA&quot;, &quot;85202&quot;, … ## $ school_nurse &lt;chr&gt; &quot;NO&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;NO&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;YES&quot;, &quot;YES&quot;, &quot;NO&quot;, &quot;Y… ## $ school_type &lt;chr&gt; &quot;PUBLIC&quot;, &quot;PUBLIC&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHARTER&quot;, &quot;CHA… ## $ enrolled &lt;dbl&gt; 59, 134, 53, 42, 113, 56, 75, 44, 45, 106, 53, 87, 54, 31, 39, 77, 94, 128, 84, 64, 23, 52… ## $ num_immune_mmr &lt;dbl&gt; 58, 134, 52, 40, 113, 55, 73, 39, 44, 105, 46, 84, 54, 30, 39, 75, 92, 127, 84, 64, 22, 46… ## $ nces_district_id &lt;chr&gt; &quot;0409060&quot;, &quot;0409060&quot;, &quot;0400797&quot;, &quot;0400368&quot;, &quot;0400940&quot;, &quot;0400891&quot;, &quot;0400202&quot;, &quot;0400122&quot;, &quot;0… ## $ nces_district_name &lt;chr&gt; &quot;Washington Elementary School District&quot;, &quot;Washington Elementary School District&quot;, &quot;Academy… ## $ nces_school_type &lt;chr&gt; &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular school&quot;, &quot;1-Regular… ## $ nces_urban &lt;chr&gt; &quot;11-City: Large&quot;, &quot;11-City: Large&quot;, &quot;21-Suburb: Large&quot;, &quot;11-City: Large&quot;, &quot;11-City: Large&quot;… ## $ nces_ratio &lt;dbl&gt; 18.56, 18.92, NA, NA, NA, NA, NA, NA, NA, 19.13, NA, 16.10, 10.73, 37.16, 27.39, 24.48, 17… ## $ nces_school_level &lt;chr&gt; &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Other&quot;, &quot;Elementary&quot;, &quot;Elementary&quot;, &quot;Middle&quot;, &quot;… ## $ nces_fips &lt;chr&gt; &quot;04013&quot;, &quot;04013&quot;, &quot;04019&quot;, &quot;04019&quot;, &quot;04013&quot;, &quot;04013&quot;, &quot;04019&quot;, &quot;04013&quot;, &quot;04025&quot;, &quot;04013&quot;, … Here are the rows that were kept without a match: rowid nces_id school_name city county zip_code school_nurse school_type enrolled num_immune_mmr nces_district_id nces_district_name nces_school_type nces_urban nces_ratio nces_school_level nces_fips 43 NA ARCADIA NEIGHBORHOOD LEARNING CENTER SCOTTSDALE MARICOPA 85251 YES PUBLIC 52 49 NA NA NA NA NA NA NA 209 NA DENNEHOTSO BOARDING SCHOOL DENNEHOTSO APACHE 86535 NO PUBLIC 21 21 NA NA NA NA NA NA NA 414 NA J.C.U.S.D. - JOSEPH CITY PRESCHOOL JOSEPH CITY NAVAJO 86032 NO PUBLIC 33 28 NA NA NA NA NA NA NA 452 NA L.H.U.S.D. #1 - DEVELOPMENTAL PRESCHOOL LAKE HAVASU CITY MOHAVE 86403 YES PUBLIC 69 67 NA NA NA NA NA NA NA 522 590014800009 MANY FARMS COMMUNITY SCHOOL, INC MANY FARMS APACHE 86538 NO PUBLIC 38 38 NA NA NA NA NA NA NA 785 NA ST THERESA LITTLE FLOWER PRESCHOOL PHOENIX MARICOPA 85018 YES PUBLIC 42 42 NA NA NA NA NA NA NA 821 NA T.U.S.D.#1 - C. E. ROSE PRESCHOOL PROGRAM TUCSON PIMA 85714 YES PUBLIC 86 86 NA NA NA NA NA NA NA In real life, you’d have to decide how much you care about these missing schools – does it ruin your story, or can you just mention that you were unable to get information for a handful of schools, amounting to about 350 students? Use the joined table Now I might want to look at which school districts have low immunization rates: immune_joined %&gt;% # by school mutate (school_pct = num_immune_mmr / enrolled * 100 ) %&gt;% # by district group_by (nces_district_name, county) %&gt;% summarise ( num_schools = n() , total_enrolled = sum(enrolled), total_immune = sum (num_immune_mmr), median_immune = median (school_pct) ) %&gt;% # district total pct (immunized / total students) mutate ( pct_immune = total_immune/ total_enrolled * 100) %&gt;% select (nces_district_name, county, num_schools, pct_immune, total_enrolled, median_immune) %&gt;% filter (median_immune &lt;= 93) %&gt;% head (10) %&gt;% kable (digits=1) nces_district_name county num_schools pct_immune total_enrolled median_immune Acclaim Charter School MARICOPA 1 88.6 44 88.6 American Leadership Academy Inc. MARICOPA 5 91.9 467 92.9 Arete Preparatory Academy MARICOPA 1 90.9 99 90.9 Arizona Connections Academy Charter School Inc. MARICOPA 1 85.6 201 85.6 Arizona Montessori Charter School at Anthem MARICOPA 1 86.5 37 86.5 Ball Charter Schools (Dobson) MARICOPA 1 90.0 40 90.0 BASIS School Inc. 12 YAVAPAI 1 85.7 91 85.7 BASIS School Inc. 6 COCONINO 1 92.6 95 92.6 BASIS School Inc. 9 MARICOPA 1 91.7 133 91.7 Benchmark School Inc. MARICOPA 1 85.5 55 85.5 8.4 Resources The “Relational data” chapter in the R for Data Science textbook has details on exactly how a complex data set might fit together. An example using a famous superheroes dataset, from Stat 545 at the University of British Columbia 8.4.1 Practice Immunization data Create a new table from the immunizations and DOE data used in this example, then see if you can find any patterns in immunization rates by school district rather than by county. (Note that charter school companies are each their own district.) Do the same by looking at urban vs. rural schools. Campaign finance data There are two tables saved in the R data file, “azcampfin.Rda”. One holds information on contributions available from the offiical FEC database as of Feb. 23, 2020 and the other holds information on the candidates and committees. The following codes are used in this dataset, which you may want to save into data frame. Here is some code you can use to create a lookup table for the transaction types. These codes can be joined with the column called transaction_tp in the contributions (or arizona20) data frame. transaction_types &lt;- tribble ( ~tcode, ~contrib_type, &quot;10&quot;, &quot;To a Super PAC&quot;, &quot;11&quot;, &quot;Native American tribal&quot;, &quot;15&quot;, &quot;Individual contrib&quot;, &quot;15C&quot;, &quot;From a candidate&quot;, &quot;15E&quot;, &quot;Earmarked (eg, ActBlue)&quot;, &quot;20Y&quot;, &quot;Non-federal refund&quot;, &quot;22Y&quot;, &quot;Refund to indiv.&quot;, &quot;24I&quot;, &quot;Earmarked check passed on&quot;, &quot;24T&quot;, &quot;Earmarked contrib passed on&quot;, &quot;30&quot;, &quot;To a convention account&quot;, &quot;31&quot;, &quot;To a headquarters account&quot;, &quot;32&quot;, &quot;To a recount effort&quot;, &quot;41Y&quot;, &quot;Refund from headquarters account&quot; ) (These are pretty complicated definitions in the federal campaign finance world. For now, don’t worry much about what they mean. Refunds are shown in the data as negative numbers, which is what you want.) Try to analyze some of this by putting together the datasets and finding interesting items or patterns. "],
["A02-programming.html", "A A gentle intro to programming A.1 Key takeaways A.2 Building blocks A.3 Make an omelet with a function A.4 Applications A.5 More resources", " A A gentle intro to programming A.1 Key takeaways All programming languages (yes, including Excel) have certain things in common: objects, operators, functions and loops. An algorithm is a set of instructions, carried out in order. No one is born knowing how to code. It takes practice. The examples here are shown mainly using R syntax. Another language might look a little different. A.2 Building blocks Once you learn to program in one language, learning others is much simpler. That’s because you have the basic concepts down: How to assign values to variables, how to loop through lists, or how to import data. This chapter walks through some of the more universal concepts in programming. Variables and objects Objects can be simple, like a variable called my_name that holds the value, “Sarah”. Or they can be quite complex, such as a multi-level data frame containing details from a Spotify playlist. Literals The most basic kind of object is a single variable that contains a single value of a specific type: my_name &lt;- &quot;Sarah&quot; my_value &lt;- 1.0 These are called “literals”, which usually include text, numeric, logical (usually true/false but sometimes yes/no or 1/0) and date or date/time. (Return to our tutorial on data types if you need a refresher.) 4 Lists / arrays / vectors Most languages have some concept of a list of items called an array, vector or dictionary. In R, you create a vector using the “c” operator, short for “combine”. Python uses a square bracket to indicate a list. Once you have your items in a list or a vector, you can apply the same function across all of them or work on them in order. my_list &lt;- c(1, 2, 3, 4, 5) creates a vector of the values 1 through 5 in R my_list = [1, 2, 3, 4, 5] creates a list of values 1 through 5 in Python Data frames or tables Data frames or data tables are really a special version of a list, and are equivalent to a tidy Excel spreadsheet: rectangular data with field names and observations. You don’t need to know much about this yet, but just understand that it will become an important part of your vocabulary. Operators &amp; assignment Operators are simple aritmetic or similar operations, like adding, subtracting, dividing and multiplying. Arithmethic: add (+), subtract (-), multiply (*), or divide (/). Text: Smush together phrases by concatenating (often + or &amp;) Comparison: Greater than (&gt;) , less than (&lt;), equal to (often == to distinguish from =), not equal to (often !=). “Assignment” means pushing a value into a var iable name using either “=” or “&lt;-”. It’s amazing how many different ways there are to think of this. Some might call “naming a value”, others might consider it “setting a variable”. (A variable is just a name you’ll use later on to refer to your value. It can vary, depending on what you do to it.) my_name &lt;- &quot;Sarah&quot; my_value = 1.0 Functions A function is a set of instructions that is either built into the programming language, is added through a package or library, or is created by you. You can save them for later use or apply them on the fly. Usually, you write the name of the function, then put its arguments inside parentheses. You did this in Excel: =SUM(A1:A15) Generally, there are categories of functions that depend on what data type they act on. An example in R is the function tolower(), which converts anything inside the parentheses to lower case. There can be several different pieces of information in a function. There can also be optional arguments. A maddening example in R is: sum ( variable_name ) This adds the values of a variable. BUT it will come out to NA if you try to include a row that was NA to begin with. Instead, you have to provide an optional arbument to get rid of NA’s before starting: sum (variable_name, na.rm=TRUE) Loops A loop is a way to repeat your instructions over and over without having to re-write them every time. They usually work by stepping through some kind of a list, like a directory of files, or by using a counter, such as every year between 2005 and 2018. Excel and Google Sheets don’t really have loops, unless you learn the more complicated programming language behind them. This is why many people move to Python and R – to get the power of loops. A.3 Make an omelet with a function Ingredients by Katie Smith via Unsplash Suppose you want to make an omelet. Before you even start, you need to know at least two things: which ingredients you have on hand, and what kind of omelet you want to make. A function that creates an omelet might look something like this. The first row creates a function called make_omelet, which requires the two pieces of information as arguments. Once you’ve made the function, you can refer to that set of instruction by its name by giving it the arguments it needs. function make_omelet (ingredients_on_hand, what_kind) { check for necessary ingredients (are all elements of what_kind in ingredients_on_hand?) quit now if you don&#39;t have them all. return the error message prepare the ingredients for (which_kind) whisk the eggs melt some butter in a pan pour in the eggs add ingredients for what_kind except cheese (what_kind - &quot;cheese&quot;) flip the omelet if you have cheese in both what_kind and ingredients_on_hand , fold in cheese remove from pan return the omelet } Now, when you want to make an omelet, you can just make your list of ingredients and the kind of omelet you want, and execute the function: Let’s start with setting up those items: ingredients &lt;- c(&quot;butter&quot;, &quot;eggs&quot;, &quot;cheese&quot;, &quot;spinach&quot;, &quot;tomatoes&quot;) kind &lt;- c(&quot;spinach&quot;, &quot;cheese&quot;) make_omelet (ingredients, kind) (Note that what you give it doesn&#39;t have to have the same name that it had in your definition.) Open a restaurant with loops Now, you’d have to repeat this over and over if you had a restaurant. It might look like this: make_omelet (ingredients,kind) ** change the ingredients and the kind** make_omelet (ingredients2, kind2) ** change the ingredients ant the kind** make_omelet (ingredients3, kind3) ... and so on. You’d have a program hundreds of lines long – one for each customer. Instead, you could loop through the customers and do the same thing: customers &lt;- c(&quot;Bob&quot;, &quot;Jon&quot;, &quot;Christie&quot;, &quot;Lauren&quot;) for (c in customers) { request what kind they want make_omelet (kind, ingredients_on_hand) give omelet to customer c update your ingredients list if you ran out of something or went shopping } A.4 Applications Many of the functions we use are already built into R and Python, or are in libraries that we borrow – someone else has already written them for you. Examples include: reading a csv or Excel file calculating the average or sum counting finding phrases within text The more common applications are things we haven’t done yet: Gather identical spreadsheets into one dataset, as in this example using refugee statistics. Loop through a list of links, download a page, then scrape it to extract information. Here’s an example from the Maricopa County sheriff’s department mugshots. (It won’t work – the census changes each time, so the ID numbers are out of date.) A.5 More resources The Data types and tidy data section of our Excel training. \"Beyond Binary, Lesson 1 from a Google engineer’s drag queen persona named Anna Lytical. This video gives you a good handle on what a computer program does. There are two special types that we’ll deal with later, but can cause a lot of headaches: NA values and factors. You don’t have to deal with them yet.↩ "],
["A01-resources.html", "B Great R Resources B.1 Key takeaways B.2 Coursework in R B.3 Instructional screencasts and videos", " B Great R Resources B.1 Key takeaways If this set of resources doesn’t fit your learning style, there are lots of others that might In our class, we are working almost entirely in the “tidyverse”, and in R Markdown documents. Some of the resources you’ll find elsewhere might not. B.2 Coursework in R Other professors and universities are also trying to teach R in journalism and other classes. Here are a few that have particularly rich materials for their students: Jesse Lecy’s “Introduction to data science for the social sector,” an ASU course that teaches R in the context of non-profit management. His site, https://ds4ps.org/cpp-526-fall-2019/ has a custom-made textbook that covers much of the same material as us. Matt Waite at the University of Nebraska has been teach R in the context of a sports journalism class and a data journalism. His textbooks are all freely available on Github. One minor difference that might trip you up: We’re using R Markdown, and he’s using R Notebooks. They’re very similar, but the “knit” option isn’t there when you use Notebooks – only a “Preview”. You’ll know what that means when we get moving. Christian McDonald at the University of Texas has also created a textbook for his data reporting class, which walks through the same data set all the way through. B.3 Instructional screencasts and videos Andrew Ba Tran’s R for Journalists course, originall created for a MOOC offered by the Knight Center for the Americas. Previous Cronkite students say that it goes a little fast for someone with no experience in other lanugages, but it has most of what you’d need. Ben Stenhaug, a Data Science for Social Good fellow at Stanford, has put together some screencasts and exercises called teachR on starting out in R and the tidyverse. “Tidy Tuesday” screencasts from David Robinson, an example using fivethirtyeight.com data on education and salaries. These are very long – up to an hour – but they walk through what it’s really like to take a dataset from scratch and try to find something interesting. I disagree with one thing he does though – I believe you should read the documentation FIRST, not after you’ve done a lot of guessing about what columns mean. Sharon Machliss’ “Do More with R” YouTube series. These are fairly advanced single-topic, short videos. "],
["A04-murders.html", "C Murder Accountability Project exercises C.1 The data C.2 Exercises by chapter C.3 Wrap-up exercise C.4 Answers to exercises", " C Murder Accountability Project exercises table { font-size:.8em; } The Murder Accountability Project was profiled in the New Yorker in November, 2017. Andrew B Tran brilliantly decided to use its data as a vehicle for learning R in his R for Journalists’ online class. This set of tutorials adapts his exercises for people using this textbook. You should consider taking his entire free full course if you want to get more detail. Download the data into a new or existing R project, then load it using the load(file=\"murder_data.Rda\") command in a code chunk. C.1 The data This R dataset was created by subsetting only mountain states and Oregon and Washington from the national dataset, and converting the codes used in the original SPSS data into codes and their labels in separate variables. The data runs from 1976 through 2018. Here are the fields included: ## Observations: 56,075 ## Variables: 37 ## $ rowid &lt;int&gt; 27475, 27476, 27477, 27478, 27479, 27480, 27481, 27482, 27483, 27484, 27485, 27486, 27487, … ## $ mapid &lt;chr&gt; &quot;197612001AZ00100&quot;, &quot;197708001AZ00100&quot;, &quot;197801001AZ00100&quot;, &quot;198207001AZ00100&quot;, &quot;198506001A… ## $ year &lt;dbl&gt; 1976, 1977, 1978, 1982, 1985, 1988, 1989, 1990, 1990, 1991, 1992, 1995, 1995, 1996, 2003, 2… ## $ month &lt;dbl&gt; 12, 8, 1, 7, 6, 11, 10, 9, 12, 2, 12, 3, 9, 4, 2, 8, 9, 8, 9, 7, 7, 5, 3, 8, 7, 10, 6, 9, 7… ## $ fip &lt;chr&gt; &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;04001&quot;, &quot;… ## $ state_fip &lt;chr&gt; &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;04&quot;, &quot;… ## $ cnty_name &lt;chr&gt; &quot;Apache, AZ&quot;, &quot;Apache, AZ&quot;, &quot;Apache, AZ&quot;, &quot;Apache, AZ&quot;, &quot;Apache, AZ&quot;, &quot;Apache, AZ&quot;, &quot;Apache… ## $ msa_code &lt;chr&gt; &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;99904&quot;, &quot;… ## $ msa_name &lt;chr&gt; &quot;Rural Arizona&quot;, &quot;Rural Arizona&quot;, &quot;Rural Arizona&quot;, &quot;Rural Arizona&quot;, &quot;Rural Arizona&quot;, &quot;Rural… ## $ state_abbr &lt;chr&gt; &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;AZ&quot;, &quot;… ## $ ori &lt;chr&gt; &quot;AZ00100&quot;, &quot;AZ00100&quot;, &quot;AZ00100&quot;, &quot;AZ00100&quot;, &quot;AZ00100&quot;, &quot;AZ00100&quot;, &quot;AZ00100&quot;, &quot;AZ00100&quot;, &quot;AZ… ## $ agency &lt;chr&gt; &quot;Apache County&quot;, &quot;Apache County&quot;, &quot;Apache County&quot;, &quot;Apache County&quot;, &quot;Apache County&quot;, &quot;Apach… ## $ agency_type &lt;chr&gt; &quot;Sheriff&quot;, &quot;Sheriff&quot;, &quot;Sheriff&quot;, &quot;Sheriff&quot;, &quot;Sheriff&quot;, &quot;Sheriff&quot;, &quot;Sheriff&quot;, &quot;Sheriff&quot;, &quot;Sh… ## $ solved &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;No&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Ye… ## $ homicide_type &lt;chr&gt; &quot;Murder and non-negligent manslaughter&quot;, &quot;Murder and non-negligent manslaughter&quot;, &quot;Manslaug… ## $ incident_num &lt;dbl&gt; 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1… ## $ vic_age &lt;dbl&gt; 42, 28, 0, 23, 18, 23, 43, 33, 33, 0, 38, 0, 37, 25, 60, 17, 60, 24, 35, 80, 74, 13, 3, 57,… ## $ vic_sex &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male… ## $ vic_race_code &lt;chr&gt; &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;… ## $ vic_race &lt;chr&gt; &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;White&quot;, &quot;… ## $ vic_ethnic_code &lt;chr&gt; &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;N&quot;, &quot;U&quot;, &quot;U&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;H&quot;, &quot;N&quot;, &quot;N&quot;, &quot;… ## $ vic_ethnic &lt;chr&gt; &quot;Unknown or not reported&quot;, &quot;Unknown or not reported&quot;, &quot;Unknown or not reported&quot;, &quot;Not of Hi… ## $ off_age &lt;dbl&gt; 22, 44, 50, 999, 999, 41, 39, 48, 999, 29, 18, 14, 23, 63, 45, 21, 21, 23, 29, 51, 51, 12, … ## $ off_sex &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Unknown&quot;, &quot;Unknown&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Unknown&quot;, &quot;Male&quot;, &quot;F… ## $ off_race_code &lt;chr&gt; &quot;I&quot;, &quot;W&quot;, &quot;W&quot;, &quot;U&quot;, &quot;U&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;U&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;W&quot;, &quot;… ## $ off_race &lt;chr&gt; &quot;American Indian or Alaskan Native&quot;, &quot;White&quot;, &quot;White&quot;, &quot;Unknown&quot;, &quot;Unknown&quot;, &quot;White&quot;, &quot;Whit… ## $ off_ethnic_code &lt;chr&gt; &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;U&quot;, &quot;N&quot;, &quot;N&quot;, &quot;U&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;N&quot;, &quot;… ## $ off_ethnic &lt;chr&gt; &quot;Unknown or not reported&quot;, &quot;Unknown or not reported&quot;, &quot;Unknown or not reported&quot;, &quot;Unknown o… ## $ situation_code &lt;chr&gt; &quot;C&quot;, &quot;A&quot;, &quot;C&quot;, &quot;B&quot;, &quot;B&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;B&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;A&quot;, &quot;… ## $ situation &lt;chr&gt; &quot;Single victim/multiple offenders&quot;, &quot;Single victim/single offender&quot;, &quot;Single victim/multipl… ## $ weapon_code &lt;chr&gt; &quot;20&quot;, &quot;13&quot;, &quot;90&quot;, &quot;11&quot;, &quot;12&quot;, &quot;12&quot;, &quot;12&quot;, &quot;12&quot;, &quot;12&quot;, &quot;40&quot;, &quot;12&quot;, &quot;40&quot;, &quot;14&quot;, &quot;12&quot;, &quot;14&quot;, &quot;… ## $ weapon &lt;chr&gt; &quot;Knife or cutting instrument&quot;, &quot;Rifle&quot;, &quot;Other or type unknown&quot;, &quot;Firearm, type not stated&quot;… ## $ relationship_code &lt;chr&gt; &quot;AQ&quot;, &quot;AQ&quot;, &quot;DA&quot;, &quot;UN&quot;, &quot;UN&quot;, &quot;AQ&quot;, &quot;AQ&quot;, &quot;AQ&quot;, &quot;ST&quot;, &quot;DA&quot;, &quot;AQ&quot;, &quot;SO&quot;, &quot;OK&quot;, &quot;AQ&quot;, &quot;AQ&quot;, &quot;… ## $ relationship &lt;chr&gt; &quot;Acquaintance&quot;, &quot;Acquaintance&quot;, &quot;Daughter&quot;, &quot;Relationship not determined&quot;, &quot;Relationship no… ## $ circumstance_code &lt;chr&gt; &quot;42&quot;, &quot;44&quot;, &quot;59&quot;, &quot;99&quot;, &quot;99&quot;, &quot;45&quot;, &quot;5&quot;, &quot;60&quot;, &quot;3&quot;, &quot;59&quot;, &quot;60&quot;, &quot;60&quot;, &quot;45&quot;, &quot;40&quot;, &quot;60&quot;, &quot;60… ## $ circumstance &lt;chr&gt; &quot;Brawl due to influence of alcohol&quot;, &quot;Argument over money or property&quot;, &quot;All other manslaug… ## $ use_date &lt;date&gt; 1980-03-01, 1980-03-01, 1980-03-01, 1982-10-06, 1985-08-21, 1989-03-15, 1990-02-06, 1991-0… Any variable that begins with off refers to the offender; any variable that begins with vic refers to the victim. Most variables are pretty self-explanatory, but here are a few details: fip and state_fip are standard codes used across many databases to identify geographic areas – in this case, counties and states. msa_code and msa_name refer to Metropolitan Statistical Areas, which combine nearby counties regardless of state into areas that are often considered on large metropolitan area, such as Washington DC and the Virginia and Maryland suburbs. ori, agency and agency_type refer to the law enforcement agency – police or sheriff’s office – that investigated the murder. An ORI is a standard code for each agency from the FBI. relationship_code and relationship can be confusing. They refer to the relationship of the victim to the offender, not the other way around. For example, “Wife” means that the victim was the killer’s wife, not that the killer was the victim’s wife. This is unclear in the FBI documentation. More details are available in this detailed record layout and data dictionary. C.2 Exercises by chapter C.2.1 Select and filter exercises Here are some suggested exercises to practice what you learned in Chapter 5, Select and Filter: Older wives as victims in Arizona Create a new data frame called arizona_murders based on just the murders that were reported in that state. Try doing these one step at a time by adding to a query : Pick out just following variables to work with: year name of the county and the police department, whether it was solved, demographics (eg, age, race, sex, ethnicity) of the victim and the offender, information on the weapon and the relationship List all of the murders in which the killer was the husband of the victim. This can be done using either the relationship or the relationship_code. Add a condition that the wives were at least 60 years old. Sort the answer by oldest to youngest Gun-related killings Finding out what codes are in the data could be done with a group_by/summarise query, but there is another verb that can show you every unique value in a dataset. Use this code to show you every type of weapon used in the dataset: murder_data %&gt;% distinct (weapon_code, weapon) %&gt;% arrange (weapon_code) The verb distinct is used instead of select to just show a list of values that are never repeated. When you run that code, you can see why it’s sometimes useful to keep codes as well as words in a dataset – codes “11” through “15” refer to some kind of gun. Question: Find all gun-related murders of young black or Hispanic men since 2015. You can define “young” however you want, but in my example I’ll use victims between 15 and 29. In this example, you’ll have to combine OR conditions, with others. Remember you can use BETWEEN for ranges of values or %in% for a list of values. Advanced exercises using other conditions If you’re feeling adventurous, try figuring out how you might find: Any domestic-violence related incidents. Hint: This would be an %in% condition once you look at your options using either “distinct” or a group-by query. Try using str_detect when you want to use wild cards instead of exact matches. These take regular expressions as arguments. So to find any gun in this dataset, you’d use str_detect(weapon_code, &quot;^1&quot;) (For more details on regular expressions, try the Regex101 tutorial on our class website. Using regular expressions is often a way to make queries shorter and less fussy, but they are not as clear to a reader – they often take some puzzling through.) C.2.2 Group by and summarise The group by exercises are just like a pivot table. In fact, to turn it on its head, you use the command “pivot_wider” “The most” Which county in this small dataset has the most murders? Which one has the most police killings? (Look in the circumstance column for this.) Create a table showing the number of murders by year and state (with states across the top, and years down the side). This is a group_by / summarise / arrange / pivot_wider exercise Try calculating the percent of murders by relationship. For this to work, you can only keep one group_by column (relationship) Putting it all together What percent of each state’s domestic violence victims are of Hispanic origin? C.2.3 Mutate In this case, there aren’t very many numbers for us to work with, but there are still things to be done to make more meaningful groupings. These are usually done using an if_else statement or something like it. Create a table that compares the number of gun murders with other weapons for each year. Try to compute the percent of murders by weapon annually. Are gun murders more likely to be solved than others? C.2.4 Join This gives you an opportunity to see how to add data to a table from the Web. This Excel file includes lots of information from the Census as of 2017, which you can link to summary data from the murder data using the county fips codes. C.3 Wrap-up exercise Try getting as far as you can to answer this question: Characterize the county with the highest murder rate, using the Census data linked above. This will require doing everything in steps: Grouping to the county level, keeping the county FIPS code Importing the Excel file, making sure you keep the FIP code as the same type of data as the one in the murder dataset. Joining the grouped file to the Census data. Computing the murder rate Deciding which variables in the Census data to use or manipulate to find a characterization that you’re interested in. C.4 Answers to exercises C.4.1 Select and filter Arizona wives Create a new dataset with just arizona: arizona_murders &lt;- murder_data %&gt;% filter ( state_abbr == &quot;AZ&quot;) You should have 15,443 rows in this dataset. The final set of queries might look like this. (You might have noticed you that you had one victim age 999 when you sorted. That means “unknown” in this dataset, so you’ll want to filter that out as well.) arizona_murders %&gt;% select ( year, cnty_name, agency, solved, starts_with(&quot;vic&quot;), starts_with(&quot;off&quot;), contains (&quot;relationship&quot;)) %&gt;% filter (relationship == &quot;Wife&quot; &amp; vic_age &gt;= 60 &amp; vic_age &lt; 999 ) %&gt;% arrange ( desc(vic_age)) You could also use relationship == &quot;Wife&quot; &amp; between (vic_age, 60, 998) You might also notice that there is a Male “wife” as a victim, reflecting how poorly many police agencies fill out these forms. Gun-related killings This is actually much more difficult than it sounds. Try to build it one piece at a time. Here is how I might build the conditions: Guns: ... weapon_code %in% c(&quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;) (This is a text variable even though it looks like numbers - that means you need the quotes. Don’t forget to use the “c” for “combine into a list” before the list of values)5 Since 2015: weapon_code %in% c(&quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;) &amp; year &gt;= 2015 Young men: weapon_code %in% c(&quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;) &amp; year &gt;= 2015 &amp; between (vic_age, 15, 29) Black and Hispanic victims: weapon_code %in% c(&quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;) &amp; year &gt;= 2015 &amp; between (vic_age, 15, 29) &amp; (vic_race_code == &quot;B&quot; | vic_ethnic_code = &quot;H&quot;) That last one is the trickiest – If you want to find both African-American AND Hispanic victims, you need to look for a race code of “B” OR an ethnicity code of “H”. Those have to be in a parenthese in order not to be confused with the other conditions. (I’m going to select just some of the columns and order it by the year and month of the murder, showing only the most recent). (NOTE: Eliminate the last line of this code if you haven’t installed and activated the “DT” package, which makes searchable, sortable tables.) If this complex filter seems too complex, you can always chain one filter after another to check your data as you go. For example, you could do this: murder_data %&gt;% filter ( weapon_code %in% c(&quot;11&quot;, &quot;12&quot;, &quot;13&quot;, &quot;14&quot;, &quot;15&quot;) ) %&gt;% filter ( vic_race_code == &quot;B&quot; | vic_ethnic_code == &quot;H&quot;) .... C.4.2 Group by “The most” County with the most killings murder_data %&gt;% group_by (state_abbr, cnty_name) %&gt;% summarise ( cases = n() ) %&gt;% arrange (desc (cases)) Why is this answer not surprising? (Hint: Clark County, Nevada, has about half the population of Maricopa.) We’ll get to ways to normalize this in later chapters. To just get the police shootings, filter the above query for circumstance_code == \"81\" before the group_by Murders by state and year “Mutate” here takes the result of the summary, then creates a new category with the annual totals. It’s a little confusing how it works, but don’t worry about it too much. Just know it’s possible. murder_data %&gt;% group_by (year, state_abbr) %&gt;% summarise (cases = n() ) %&gt;% #bonus: Calculate the total number of cases by year: mutate ( total_cases = sum(cases) ) %&gt;% pivot_wider (names_from = state_abbr, values_from = cases) %&gt;% arrange ( desc (year)) Does this mean that these states have suddenly become more dangerous? What about population growth? Alternative method The janitor package (which you may need to install) has a way to create cross-tabulations like this more simply. The function is tabyl (to distinguish from other table operations in R, which you probably want to avoid). Here’s an example: murder_data %&gt;% tabyl ( year , state_abbr) %&gt;% arrange ( desc (year) ) %&gt;% head () year AZ CO ID MT NM NV OR UT WA WY 2018 425 248 37 40 168 239 115 69 255 17 2017 484 252 48 43 166 311 131 82 242 14 2016 394 208 47 37 111 228 111 76 213 23 2015 344 189 32 38 105 203 85 61 224 18 2014 313 165 30 30 128 185 84 72 206 14 2013 383 186 30 16 119 168 85 51 194 17 Percent of murders by relationship: Once those totals are calculated, you can use them to compute a new variable, such as percent. murder_data %&gt;% group_by (relationship) %&gt;% summarise (num_of_cases = n() ) %&gt;% mutate (total_cases = sum(num_of_cases) , # This rounds to 1 digit. pct_cases = round (num_of_cases / total_cases * 100 , 1) ) %&gt;% # you could un-select the total cases since they&#39;ll always be the same , but for illustratio purposes I&#39;m keeping it. arrange ( desc (num_of_cases)) Alternative method with janitor::tabyl murder_data %&gt;% tabyl (relationship) %&gt;% adorn_pct_formatting (digits=1) %&gt;% #this last part turns it into a normal data frame arrange ( desc(n)) %&gt;% as_tibble() Putting it all together First, isolate the domestic violence cases. Let’s see what our choices are: murder_data %&gt;% group_by (relationship_code, relationship) %&gt;% summarise (n()) relationship_code relationship n() AQ Acquaintance 11935 BF Boyfriend 669 BR Brother 534 CH Common-law husband 84 CW Common-law wife 178 DA Daughter 1005 EE Employee 53 ER Employer 74 FA Father 480 FR Friend 2368 GF Girlfriend 1893 HO Homosexual relationship 135 HU Husband 904 IL In-law 365 MO Mother 559 NE Neighbor 727 OF Other family 873 OK Other - known to victim 2349 SD Stepdaughter 102 SF Stepfather 159 SI Sister 168 SM Stepmother 23 SO Son 1260 SS Stepson 163 ST Stranger 9988 UN Relationship not determined 15774 WI Wife 2890 XH Ex-husband 76 XW Ex-wife 287 Here’s one way to get the answer (eliminating cases in which we don’t know the victim’s ethnicity) murder_data %&gt;% filter ( relationship_code %in% c(&quot;BF&quot;, &quot;BR&quot;, &quot;CH&quot;, &quot;CW&quot;, &quot;DA&quot;, &quot;FA&quot;, &quot;GF&quot;, &quot;HO&quot;, &quot;HU&quot;, &quot;IL&quot;, &quot;MO&quot;, &quot;OF&quot;, &quot;SD&quot;, &quot;SF&quot;, &quot;SI&quot;, &quot;SM&quot;, &quot;SO&quot;, &quot;WI&quot;, &quot;XH&quot;, &quot;XW&quot;) &amp; vic_ethnic_code %in% c(&quot;H&quot;, &quot;N&quot;) ) %&gt;% group_by ( state_abbr, vic_ethnic ) %&gt;% summarise (cases = n() ) %&gt;% #calculate total by state and percent mutate ( total_cases = sum(cases), pct_cases = cases / total_cases * 100 ) %&gt;% #get rid of case counts select ( -cases ) %&gt;% #sort by state arrange ( state_abbr ) %&gt;% # put ethnicity in columns pivot_wider ( values_from = pct_cases, names_from = vic_ethnic) If you wanted to go further with filtering, you might look at the regular expressions available for more sophisticated filtering using the str_detect function. In this case, str_detect (weapon_code, \"^1\") searches for anything in the field that begins with a “1”.↩ "]
]
