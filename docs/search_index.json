[
["index.html", "R Study Guide for Cronkite School of Journalism Preface", " R Study Guide for Cronkite School of Journalism Sarah Cohen, Knight Chair in Journalism Preface This online book is serving as a study guide for students in my data journalism classes at the Cronkite School of Journalism. Eventually, this will put together the resources for the whole class, but for now it just includes the section on learning R and R Markdown. I’m grateful for all of the experts and teachers out there who have made their training materials open to the world, and helped build a wealth of materials for students of all types. I’ve particularly leaned on Matt Waite, of the University of Nebraska and Jesse Lecy of Arizona State University, who generously share their course materials. "],
["011-r-install.html", "1 An R and R Studio tour 1.1 Key takeaways 1.2 Why program? 1.3 Setting up R and R Studio 1.4 An R Studio tour 1.5 Variables 1.6 Resources and exercises", " 1 An R and R Studio tour 1.1 Key takeaways The benefits of learning a programming language Accessing R and RStudio on the cloud, or installing it on your computer Distinguishing the programming language R from the way you interact with it, RStudio. Getting accustomed to the RStudio screen. Interacting with the Console Understanding, installing and invoking packages. Storing values in variables for later use. 1.2 Why program? All programming languages have one thing in common: You write instructions, called algorithms, and the program executes your statements in order. It means you can do more complicated work in computer programming than in point-and-click parts of Excel. It can also scale – you can repeat your instructions millions of times, tweak it a little, and re-run the program without messing anything else up. The computer won’t mind – really. Finally, writing code can be self-documenting. You can largely eliminate those painstaking Excel data diaries and replace them with documents that explain your work as you go. You’ll still need to record information about your interviews and decisions, but you’ll no longer have to write down every mouse click. Why R? It’s free and open source – you will be able to get access to most of what R has to offer without ever paying for a service or a piece of software. More importantly, R has become the de facto tool for statistical and data analysis in many newsrooms and academic settings. Some news organizations strongly prefer interns and entry level data reporters who have at least a little experience with the language. There’s also a huge user base, with many people willing and even eager to help newcomers. R also has extensions, called packages, that cover most tasks you need as a reporter. Other lanugagees like Python can also be extended this way – choosing which one to use is largely a matter of taste and comfort. Many employers don’t care which programming language you know because it’s relatively easy to learn another once you’re comfortable with the concepts. 1.3 Setting up R and R Studio Andrew Heiss, who teaches BYU’s Data Science for Public management, has a detailed walkthrough on getting access to R and R Studio. This is the short version. RStudio Cloud The very easiest approach to getting most everything you need is to sign up for a free account on RStudio Cloud. You’ll use the program through your web browser instead of putting it on your computer. It’s nearly identical to the program you’d run on your laptop. It can be a little slow to start up, and it can crash every once in a while. Be patient, careful and save often. Install yourself If you want to install on your laptop, try these steps. You’ll have to be an administrator allowed to install software on your computer, for it to work. MAC users only: To get R Studio to work properly, your computer should have command line tools installed. These aren’t installed by default in Apple’s operating system. This is a pain, but you only need to do it once. You’ll get annoying errors in R Studio if you don’t do this. Open up a terminal window, found in your Applications folder under Utilities. First, check to see if it’s already installed by typing xcode-select -p. If it replies with a path to a folder, you can skip this part – you already have it. If not, type xcode-select --install. You’ll get an error message saying that it can’t be done because you don’t have command line tools, and would you like to install them now? Say yes. Once it’s done, just close out your terminal. You never wanted that thing you asked to install in the first place. Everyone: Download and install R for your computer. Use the most recent binaries for your operating system. Install R Studio Desktop for your computer ONLY AFTER YOU HAVE INSTALLED R. Use the free community version. 1.4 An R Studio tour Now you’re ready to start using R and R Studio. R is the underlying programming language, which you will probably never use on its own. R Studio is an interface to that language that helps you organize projects, write code, see your results and keep track of your work. Fire up R Studio, not the R language to get started. console 1.4.1 The Console The Console is where you can type commands and interact directly with the programming language. Think of it as a very powerful calculator at first. When you type this: 5+5 after the &gt; prompt, you’ll get this back: [1] 10 When you type this: \"Sarah\" (with quotes) after the &gt; prompt, you’ll get this back: [1] \"Sarah\" But if you type this: Sarah (without quotes) after the &gt; prompt, you’ll get this error: Error: object 'Sarah' not found. That’s because it thinks you want to use a variable named Sarah, not the literal letters S-a-r-a-h 1.4.2 Packages The real power of R comes with packages. Packages are bundles of programs that others have found useful to extend the base R language. R is almost useless without them. There are thousands of packages available for R, each doing a special job. As a general rule of thumb, install packages using the console. They must be installed once on every computer, or in every project when you use RStudio Cloud. You have to activate packages every time you start R, even if you’re just picking up where you left off. Invoke the package by using the library() command. Packages for this class Using the Console, install the packages we need for class: install.packages(&quot;tidyverse&quot;) install.packages(&quot;rmarkdown&quot;) install.packages(&quot;swirl&quot;) A quick note on the tidyverse Almost all of the materials you see related to programming in R have some reference to this thing called the “tidyverse”. One problem with having a lot of packages, often written by hobbyists, is that they’re not very consistent. One might use a comma where another uses some dots, for example. The tidyverse packages up a whole set of other packages, ensuring they all work together smoothly and have similar commands. It’s made for the kind of work reporters do – importing, cleaning and analyzing data that we get from others and can’t control how it’s structured. For many reporters (myself included), R was too difficult to learn before the tidyverse came around. We’ll be working almost exclusively within the tidyverse in this book. The tidyverse is the brainchild of Hadley Wickham, a statistician from New Zealand, who famously identified the tidy data principles we’ve followed all semester. He’s currently the chief data scientist for RStudio in Houston. 1.4.3 Work in projects One of the things that trips up new users of R is that it’s hard to tell the program where to find things on your computer. The “working directory” can be confusing. One way to get around that is to always work in projects. Projects in R isolate your work in a single folder, which can be transferred from computer to computer without worrying about what’s missing. If you’re using RStudio.cloud, every project is already self-contained. Instead of creating a new file when you start R, create a new project, and tell R where to put the directory when prompted. Then, when you want to return to the project, open the project rather than a file. 1.5 Variables A variable is a container for a value, a list or some other kind of object. At its simplest, it might hold a number or a word. To make a variable, use the assignment operator: &lt;- . Think of it as a value being pushed into a name: my_variable &lt;- 13 When you hit the return button, nothing happens. Instead of printing it, it’s stored it in a variable and it’s added to your Global Environment pane. Now you can use the name instead of the value. Using variables in new variables You can always use a variable you already computed to calculate something new: Working with lists One of the most powerful characteristics of a programming language is that it lets you work on a whole set of values at once, usually through a list. In R, they’re called vectors. Think of them as the values in a column of a spreadsheet. Create a vector with the c operator, short for “combine”: c( &quot;me&quot;, &quot;you&quot;, &quot;everyone&quot;) c( 1, 2, 3) In most contexts, they have to all be the same data type. 1.6 Resources and exercises Before you move on in this book, you should make sure that you have a way to get RStudio, either on your computer or on RStudio Cloud, and that it’s installed properly. Take the swirl() tutorial If you haven’t done it already, install the swirl() package. Do this in the Console: install.packages(\"swirl\") Once it’s installed, activate it using the library command and start it up. library(swirl) swirl() Then just follow the prompts. Don’t worry that they’re red – it doesn’t mean there’s anything wrong. You should do the first section of the first chapter: “1: R Programming: The basics of programming in R” -&gt; “Basic Building Blocks”. At the end, hit the escape key. 1.6.1 Googling for help There are a few tricks to getting a good Google answer. First, set the time frame for the answer to the last year. It doesn’t always work, but at least you’re trying to get more recent answers. R has changed A LOT over the last 3-5 years. You don’t want to get bogged down in the “old” way. Add the name of any package you’re using. If you aren’t sure which one is tripping you up, just add the word “tidyverse” to the query. That will get you closer. Other resources Sharon Machlis’ Practical R for Mass Communications and Journalism has an intro to R and R Studio beginning in chapter 2.3 Ben Stenhaug created a fast-paced video introducing the R Studio interface. Don’t worry too much about what some of it means just yet – just see if you can get used to the different parts of the screen. "],
["021-r-markdown.html", "2 R Markdown 2.1 Key takeaways 2.2 Getting started with R Markdown 2.3 The anatomy of a document 2.4 Knitting your document 2.5 Code chunks 2.6 Resources and exercises", " 2 R Markdown table { font-size:.9em; } 2.1 Key takeaways Markdown makes documenting your work easy Formatting commands in Markdown: headings, links, lists and images. Adding and running code chunks Knitting your markdown into a finished document with code and results. 2.2 Getting started with R Markdown Markdown was invented as an easy way for early contributors to Wikipedia to author documents that would translate to the web. It uses simple formatting rules that don’t require any background in programming, HTML or CSS formatting code. This book is written using Markdown. Variants of markdown are used to create many web sites, including those hosted on Github. R Markdown is an enhanced version of markdown. In it, you write your document around chunks of R code, which integrates your analysis with your writing. (R Markdown is also designed to output your work in other formats, like an actual printed book or slides.) Some news organizations do much of their internal work using R Markdown documents and code. You must install the rmarkdown package before you can use this feature. Install it in the Console. You only have to do this once on each computer, or in each project on rstudio.cloud: install.packages(&quot;rmarkdown&quot;) Unlike other packages, it’s automatically loaded when you start up R Studio. 2.3 The anatomy of a document Markdown uses simple punctuation to create outline levels, lists, links and other elements of a page. There are four parts to an R Markdown document: The “front matter”, or YAML. Plain text with formatting indicators. Code chunks – your R computer code. The results of code chunks - what you get back when you execute the code. The plain text follows a few basic rules. This markdown cheatsheet from Adam Pritchard goes through them, but the most common are: Symbol Format Comments # First level outline usually reserved for the title ## Second level outline … and so on * A bulleted list item Separate from the text by one empty line 1 A numbered list []() A link [my link words](http....) ![]() An image link ![alt-text](path/to/myimage.jpg) &lt;&gt; A simple link shown as an address &lt;https/cronkitedata.github...&gt; ** Bold text **This would be bold** * Italic text *This would be italic* Front matter / YAML at the top The way the R knows to do these things is by reading the very top of the file and looking at the section between the three dashes, which gives values to specific items R Markdown is expecting in a format called YAML. It’s very picky about this, so if you get an error, look there for a problem. The good news is that the YAML is created for you when you create a new R Markdown document. When you get more comfortable, you may want to tweak the look and feel of your document by adding parts to this section. --- title: &quot;Title for your page&quot; author: &quot;Sarah Cohen&quot; date: &quot;1/6/2020&quot; output: html_document --- 2.4 Knitting your document Look at the top of your screen, and you’ll see a knitting needle and the word, “Knit”. Pressing that button will convert your markdown into the finished document. Here’s how it looks pre-knitted and after knitting: There are three reasons it might not work: You haven’t saved the document yet. There is an error in that top YAML section. Just copy one that works and try again. There is an error in your R code. (You’ll see how to skip a chunk with an error later on.) I usually change one default option: I have a large screen so I like to see my document in RStudio rather than as a separate document so I don’t have to flip back and forth between windows. To do that, change the options by clicking on the little gear near the knit button: 2.5 Code chunks So far, this is just a simple document. It doesn’t contain any R code. To add code, you insert a “code chunk”. You can add it by clicking the +Insert button at the top of the document, or by pressing Option/Alt-Cmd-i Add your code in the gray area between the triple-backtic symbols. Run the code chunk by pressing the arrow button within it, or by pressing Cmd/Ctl-Shft-Enter (either Cmd or Ctl) This might not seem like much, but think about how it helps you do your analysis. You can write all of your notes right where you do the work. You don’t have to copy and paste information from one place to another, or share out-of-date spreadsheets with your teammates. R Markdown starts from scratch Every time you close down your computer or restart R, you have to run every code chunk to get back to where you left off. This includes loading any libraries and data. This is actually good – it ensures that your project is reproducable. But it can be confusing at first. I just knit my program as soon as I start up R each time, which takes me to where I left off. 2.6 Resources and exercises Resources “Data driven docs” walkthrough on DS4PS (or, Data Science for the Public Sector) RStudio has a quick tour of R Markdown that goes through more than you even need. It goes a little fast. Exercises Make sure you have already installed the rmarkdown package before going further. Create a new R Markdown document with the following elements: Front matter with your name, the date and a title for your page. A heading introducing a subtopic Within that heading, a list of three things about yourself or about a topic you love, in a bulleted list. Another heading An image that you like Another heading A code chunk, in which you create a variable and assign it a value. Then knit the document and compare the sections. "],
["022-data-frames.html", "3 Data frames and the tidyverse 3.1 Key takeaways 3.2 Getting started 3.3 The data frame 3.4 Introducing the pipe 3.5 Take a break 3.6 Other resources", " 3 Data frames and the tidyverse 3.1 Key takeaways Loading the tidyverse Reading data from from Excel or from a text file. Looking at your data Introducing the “pipe” (%&gt;%) and a verb But first…. 3.2 Getting started Every time you start up R, you will need to load any packages you intend to use. That’s usually the first code chunk in your R Markdown document. If you put all of the libraries you need there, anyone you share with will know which ones have to be installed in the future. Here’s how I start up a new project with a new document: I usually add “message=FALSE” to the r in the brackets to prevent a whole bunch of largely meaningless but scary messages. If there’s a real problem, R will still let me know: (From now on, you’ll only see the code in between the three backtics. They’re invisible in the output.) 3.3 The data frame A data frame is an R “object”, and is treated like any other variable. The difference is that it contains columns and rows, just like a spreadsheet. The best data frames follow the same tidy data principles that we went over in Excel: Each column contains one kind of information – race, sex, address, etc. Each row contains one example of each of those columns, all at the same unit of analysis. Each data frame contains different levels or types of information. 3.3.1 Loading and looking at data Much of the data you use in R starts out as a CSV text file or one of its cousins. (See the file format tutorial if you don’t remember what that is.) Generally, R will guess what type of column each one is – number, text or date. (See the data types tutorial if you forgot what that means.) There are ways to override its guess, but it’s often right. The following code chunk: Creates a variable to store the long address. That makes it easier to troubleshoot or change later on. Asks the tidyverse to execute the function read_csv on the stored link address. The function can read files stored on the web or on your computer. This data is from the Phoenix open government site, and contains staff salaries as of 2018 #the location on the Web for the data set&#39;s csv download my_link &lt;- &quot;https://www.phoenixopendata.com/dataset/0c02bbfd-08d9-41e9-a00c-97848a9f7350/resource/3a5c2950-88e3-4cb4-b436-c78d2a266c75/download/open-data-staff-salaries-as-of-12-31-2018.csv&quot; #use it in a read_csv command phx_salaries &lt;- read_csv( my_link ) When you run this code, you’ll rececive a scary looking message. Don’t worry - it’s just giving you some information about what it found in the online file: Parsing message from import Notice that the column names are set automatically using the first name of the file. One of the first things you’ll often want to do with a csv file is change the names using a standard style. I usually prefer lower case names with underscores between words. If I always use those, I won’t have to remember which. The read_csv command, or function, is part of the tidyverse. The import functions you’ll use the most are: read_csv() read_excel() read_delimited() They all work pretty much the same way on slightly different types of data files. 3.3.2 Examine your data You should now see the name of the data frame in your Global Environment. Click on it to View it, or issue the View(phx_salaries) command. You can look at your data by clicking on its name in the “Global Environment” window, or by using some standard functions in R to explore them. Use the head() function to look at the top and the tail() function to look at the bottom: head(phx_salaries) LAST_NAME FIRST_NAME DESCR ANNUAL RATE Aamodt Gail Police Officer 72425.60 Abbitt Ryan Firefighter 56hr 67974.82 Abbott Christie Forensic Scientist IV 99195.20 tail(phx_salaries) LAST_NAME FIRST_NAME DESCR ANNUAL RATE de la Fuente Mariana Curriculum/Trng Coord*Supv Dev 77334.4 de los Rios Jr Ruben Police Officer 54475.2 von Kampen Michele Caseworker II 57283.2 .. and use the “structure” command to see the variable names and types. str(phx_salaries) ## Classes &#39;spec_tbl_df&#39;, &#39;tbl_df&#39;, &#39;tbl&#39; and &#39;data.frame&#39;: 11956 obs. of 4 variables: ## $ LAST_NAME : chr &quot;Aamodt&quot; &quot;Abbitt&quot; &quot;Abbott&quot; &quot;Abdellatif&quot; ... ## $ FIRST_NAME : chr &quot;Gail&quot; &quot;Ryan&quot; &quot;Christie&quot; &quot;Tariq&quot; ... ## $ DESCR : chr &quot;Police Officer&quot; &quot;Firefighter 56hr&quot; &quot;Forensic Scientist IV&quot; &quot;Environmental Quality Spec&quot; ... ## $ ANNUAL RATE: num 72426 67975 99195 73653 35714 ... ## - attr(*, &quot;spec&quot;)= ## .. cols( ## .. LAST_NAME = col_character(), ## .. FIRST_NAME = col_character(), ## .. DESCR = col_character(), ## .. `ANNUAL RATE` = col_double() ## .. ) 3.4 Introducing the pipe This is how I explain the ‘pipe’ to #rstats newbies… pic.twitter.com/VdAFTLzijy — We are R-Ladies (@WeAreRLadies) September 13, 2019 You’ll be seeing a lot of R code that has this format: data_set_name %&gt;% verb ( nouns ) %&gt;% verb ( nouns ) %&gt;% etc... That little symbol, %&gt;% is called the “pipe”. It means “and then…” Here’s a simple example with a verb called rename. It takes the names of the variables from the first line, AND THEN renames them! This is something you often have to do because R will assume that the first row of the csv file contains the names of your variables. Using them, though, can be a pain – you have to remember whether they’re upper or lower case, and you have to put back-ticks (`) around any names with spaces or special characters. Here’s what using the pipe looks like to create a NEW data frame out of the old one with the names changed to lower case with underscores, a common pattern in many computer programs: phx_salaries_renamed &lt;- #create a new data frame out of the next set of commands phx_salaries %&gt;% #start with the original data frame name, AND THEN rename ( last_name=LAST_NAME, # A list of new_name = old_name pairs, separated by commas first_name=FIRST_NAME, job_title = DESCR, annual_pay = `ANNUAL RATE` #note the crazy back-ticks that you have to type for two-word names ) head (phx_salaries_renamed) # print out the first few rows. You can leave out any name you don’t want to save. (There are fancier, faster ways to do this, but don’t worry abou that just yet. This is the easiest to remember.) This code chunk results in something that looks like this: last_name first_name job_title annual_pay Aamodt Gail Police Officer 72425.60 Abbitt Ryan Firefighter 56hr 67974.82 Abbott Christie Forensic Scientist IV 99195.20 3.5 Take a break If you’ve gotten this far, congratulations – you’ve started programming in R. I’ve skipped a lot of details that don’t matter much right now. You’ll see examples of using options and slightly different commands for the same things as we move along. But the process of reading data into R, taking a quick look at it, and acting on it to create a new dataset is one you’ll be doing a lot. Max van den Oetelaar via Unsplash 3.6 Other resources Take a look at Jesse Lecy’s lesson on “Learning How to Learn” from his data science class at ASU. It will make you feel better, I swear. Hadley Wickham’s “R for Data Science” chapter on importing data goes into a lot of the options and variants of the read_csv command. RStudio has one of its many cheat sheets on the read_csv function and its cousins. Unfortunately, a lot of the other resources we’ve seen don’t use the tidyverse versions of the import commands and they work somewhat differently. I think they’ll just be confusing, since we’re not dealing with the “base R” program. 3.6.1 On your own Start a new project in R. Download this Excel file into the folder. Create an R Markdown document and document where you got the file and where it’s stored. Try importing the file into R using the read_excel function, which works just like read_csv. Take a look at its structure (str), its top (head) and its bottom (tail). Try creating a NEW data frame from the original and rename a couple of columns. If you can get past the errors, knit the document and bask in the knowledge that you’ve come a long way. You can be quietly proud. You will likely have some errors to puzzle through if you’ve never programmed anything before. Don’t get discouraged – copy and paste the code from this tutorial, and then adapt it to your needs. Try to read any error messages. Follow the 20-minute rule: If you have been working for 20 minutes without ANY progress and are out of ideas or don’t understand what you’re trying to do, step away from the computer. When you come back, if you’re still stuck, get help. table { font-size: .8em; } "],
["030-intro-verbs.html", "4 A quick tour of verbs 4.1 Key takeaways 4.2 Looking at your data in pieces and in order 4.3 group_by and summarise to count and sum 4.4 Resources and exercises", " 4 A quick tour of verbs 4.1 Key takeaways Verbs are functions; nouns are variables or objects. Do one thing at a time using the “and then” operator (%&gt;%). You only really need a few verbs to get a lot done: select, filter, arrange: Pick out and sort specific items group_by, summarise : count and sum by category mutate : create new columns with formulas You’ve probably done most of this before in Excel These are similar to other database languages such as SQL. This chapter will go through the very basics of each verb. Subsequent chapters will go into more detail on how to make them work in a variety of circumstances. Data for this walkthrough All of these sections will be based on the 2017-2018 Arizona immunization data. The data was downloaded from the Arizona Department of Health. The link for “Arizona Reporting Schools Coverage” under each year is the Excel file. The following changes were made to the original file: Remove any specific immunizations other than MMR, for measles Remove schools with under 20 students, for which the state did not report any data individually. It accounted for 113 schools, or about 10 percent of the schools. Estimating all of those schools at their maximum possible (19), it would account for about 2.5 percent of the students. Estimate the number of children in each category by multiplying the percentage by the enrollment. There is room for rounding error in this. Variable name Type Description school_name chr upper case address chr upper case city chr upper case zip_code chr 5-digit zip code, leading 0 if needed school_nurse chr “YES”/“NO” school_type chr “PUBLIC” / “CHARTER” / “PRIVATE” enrolled num 6th grade enrollment num_immune_mmr num # of immunized students for measles num_exempt_mmr num # of student exempt from requirement for measles num_compliance_mmr num total of immune + exempt (in compliance with rules) num_pbe num # with personal believe exempt. for at least 1 immunization num_medical_exempt num # who have a medical exemption for at least 1 immunization num_pbe_exempt_all num # who have personal believe exemption for every shot Note: It seems that some students who could be exempt from mmr get it anyway – there are cases in which there are larger numbers with pbe exemptions for all immunizations than the number with mmr exemptions. The %&gt;% operator: … and then… The tidyverse encourages you to do your work one step at a time. Instead of packing everything into one command, stack them by saying “start here, and then.. and then .. etc.” grade6_counts %&gt;% # start with the data frame, AND THEN... select (school_name) %&gt;% # pick out the school name only AND THEN ... arrange (school_name) # put them in alphabetical order 4.2 Looking at your data in pieces and in order 4.2.1 select to pick out columns In Excel, there was no easy way to filter data vertically. We could only filter rows. The select verb picks out specific columns. Rename them at the same time by putting the new name on the left side of an equal sign: grade6_counts %&gt;% select ( school = school_name, county, enrolled) %&gt;% head(3) 4.2.2 arrange to sort In Excel, the “Sort” menu item is used to arrange data alphabetically or in numeric order. That’s confusing, because “sorting” can be construed a lot of different ways. For instance, you might “sort” M&amp;Ms into their colors. But in R, the verb is “arrange”, which is much clearer conceptually. The arrange verb puts the rows in order based on the column or columns you specify. This arranges the data from the highest to lowest enrollment by using the desc indicator. You can have more than one column, which takes over when there’s a tie. grade6_counts %&gt;% select ( school = school_name, county, enrolled) %&gt;% arrange ( desc(enrolled)) %&gt;% head(3) 4.2.3 filter to pick out rows This is one place where the Excel terminology carries over to R. There is a whole chapter on filtering – it can get quite sophisticated – but just remember that it is much more picky than you’re accustomed to. The computer sees MARICOPA as a completely different word than Maricopa, for example. Use two equals sign to test for a match (==) : and they have to match exactly. grade6_counts %&gt;% select (school_name, enrolled) %&gt;% filter ( school_name == &quot;AMPHITHEATER MIDDLE SCHOOL&quot;) 4.3 group_by and summarise to count and sum The group_by and summarise command is just like a pivot table, but it has a lot more power when you get to know it. At its simplest, it does just what a pivot table does: group_by puts each row into categories, such as the school types above. summarise calculates summary statistics such as counts – or n() – and sums: grade6_counts %&gt;% filter ( county == &quot;MARICOPA&quot;) %&gt;% group_by ( school_type ) %&gt;% summarise ( sum (enrolled), n() ) 4.3.1 mutate to calculate something new The verb mutate means to take old information and turn it into a new column. The most obvious example in this data is to get the schools with the lowest immunization rates: grade6_counts %&gt;% mutate (pct_immune = (num_immune_mmr / enrolled) * 100) %&gt;% arrange (pct_immune) %&gt;% select (school_name, pct_immune, num_immune_mmr, enrolled) %&gt;% head(10) Note that the percentage has to be multiplied by 100 – there is no simple formatting that will keep the numbers in tact the way there was in Excel. Don’t worry about the ugly numbers for now – you’ll see ways to improve on that later. 4.3.2 TK left_join to merge with other tables. ( Stay tuned..) 4.4 Resources and exercises table { font-size: .9em; } "],
["031-select-filter.html", "5 Verbs Part 1: Picking and choosing 5.1 Key takeaways 5.2 Select - choosing columns 5.3 Filter - choosing rows 5.4 Arrange - change the order 5.5 Traps 5.6 Resources", " 5 Verbs Part 1: Picking and choosing 5.1 Key takeaways Verb 1 - select to subset the data frame vertically (pick out / rename columns) Verb 2 - filter to subset the data frame horizontally (pick out rows) Verb 3 - arrange to display the data in a certain order Troubleshooting common error messages We’re going to use some standard ways to pick out information from a data frame using verbs: select and filter. Don’t forget to load the tidyverse! library(tidyverse) This tutorial uses data that was downloaded in 2019 from the Tempe, Ariz., Open data site. It’s since been removed. It contains a list of opioid-related EMS calls for the city. There was virtually no documentation on the site to explain the variables. (Tempe officials have said that they are planning to republish it with less detail.) my_link &lt;- &quot;https://cronkitedata.github.io/cronkite-docs/assets/data/csv/opioidemscalls.csv&quot; #use it in a read_csv command opioid_calls_orig &lt;- read_csv(my_link) Once read in, the dataset has 650 rows and 21 columns: 5.2 Select - choosing columns In Excel, we never had the opportunity of just pulling little cuts of our data vertically – we could filter the rows, but not the columns. The “select” verb picks out COLUMNS of your data, and allows you to rename at the same time. Note that R is case-sensitive, meaning that the variable named Age is not the same thing as the variable named age. This is one reason rename columns using a common pattern – you don’t have to think about it again. It’s also useful to remove spaces and special characters from your column names, which are difficult to reference with them. This code chunk selects only some of the variables from our original data frame and saves them in a new data frame: opioid_calls &lt;- #create a new data frame, &quot;opioid_calls&quot; opioid_calls_orig %&gt;% #start with the old data frame and then.. select (id = OBJECTID, #pick out only some columns, and change their names at the same time incident_date = IncidentDate, dow = Day_of_Week_Sort, narcan = `Narcan/Naloxone Given`, #you have to use back-ticks for special characters impression = Primary_Impression, age = Age, gender = Patient_Gender, asu_yn = Is_ASU_student, vet_yn = Is_Veteran, homeless_yn = Is_Homeles, special_population = Spec_Pop ) Here’s what it the first few rows of our selected columns looks like. (It might be chopped of on the right in your browser.) id incident_date dow narcan impression age gender asu_yn vet_yn homeless_yn special_population 2 1/3/2017 11:42 (2) Tuesday No Alcohol Intoxication (F10.9) 40 to 44 Female No No No No 3 1/9/2017 1:08 (1) Monday Yes ALOC (R41.82) 40 to 44 Male No No No No 4 1/9/2017 1:55 (1) Monday No No Apparent Illness or Injury (Z71.1) 20 to 24 Male No No Yes Homeless Optional: Other ways to select R has a lot of shortcuts so you don’t have to type as much as in some other languages. You can identify columns by their position in the file, by the kind of data they hold (numbers, characters, etc.), or by the words their names contain. Here’s an example: opioid_calls %&gt;% select ( id, weekday = dow, narcan : gender, #vars narcan through gender in the list contains (&quot;yn&quot;) # has &quot;yn&quot; in the name ) 5.3 Filter - choosing rows *Filter** is the verb you use to choose which rows are included in your output. Use comparison operators to choose the rows that meet certain conditions. The ones you’ll usually use are: == equals &gt; Is more than &lt; Is less than %in% Is in a list of values != does NOT equal Connect them with logical operators, including: | &quot;Or&quot; -- think of it as &quot;this or that&quot; &amp; &quot;And&quot; -- both things must be true “==” isn’t “=” ! You always need two equals signs for comparison. A single = sign is used to assign something to another value. 5.3.1 One filter If you don’t create a new data frame using the &lt;- assignment, it will just print out on the screen. Use the “glimpse” verb to take a peek at it vertically in a way the fits on the screen. Put the name of the column on the left side of the comparison, connect it with two equal signs, and put the value you want to look for (in quotes if it’s text) on the right. The two equal signs means that it must be EXACTLY the same – not sort of the same – including upper and lower case. opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; ) %&gt;% glimpse ## Observations: 370 ## Variables: 11 ## $ id &lt;dbl&gt; 3, 7, 11, 12, 13, 18, 20, 21, 25, 29, 30, 34,… ## $ incident_date &lt;chr&gt; &quot;1/9/2017 1:08&quot;, &quot;1/11/2017 11:10&quot;, &quot;1/14/201… ## $ dow &lt;chr&gt; &quot;(1) Monday&quot;, &quot;(3) Wednesday&quot;, &quot;(6) Saturday&quot;… ## $ narcan &lt;chr&gt; &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Yes&quot;, &quot;Ye… ## $ impression &lt;chr&gt; &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.82)&quot;, &quot;ALOC (R41.… ## $ age &lt;chr&gt; &quot;40 to 44&quot;, &quot;80 to 84&quot;, &quot;35 to 39&quot;, &quot;40 to 44… ## $ gender &lt;chr&gt; &quot;Male&quot;, &quot;Male&quot;, &quot;Female&quot;, &quot;Male&quot;, &quot;Male&quot;, &quot;Ma… ## $ asu_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… ## $ vet_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… ## $ homeless_yn &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… ## $ special_population &lt;chr&gt; &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;No&quot;, &quot;Unknown&quot;, &quot;No&quot;… Here are the pieces of that function: In this case, you know that there were 370 rows that met your condition. It looks right – all of the narcan items that we can see are “Yes”. 5.3.2 A compound filter Filter for more than one condition that must be true using the “and” operator: &amp;. opioid_calls %&gt;% filter (narcan == &quot;Yes&quot; &amp; asu_yn == &quot;Yes&quot;) 5.3.3 Even more compound filters OR conditions Say we want either asu OR veterans who got Narcan. Here’s a query that combines the and (&amp;) condition with an or (|) condition: opioid_calls %&gt;% filter ( narcan == &quot;Yes&quot; &amp; (asu_yn == &quot;Yes&quot; | vet_yn == &quot;Yes&quot; ) ) %in% conditions Use the operator %in% when you want to pick among several possible answers. Say I want to look at anyone aged 20 to 29. Instead of “or”, I can use %in% because it’s only one column: opioid_calls %&gt;% filter (age %in% c(&quot;20 to 24&quot;, &quot;25 to 29&quot;)) 5.4 Arrange - change the order “Arrange” is the equivalent of “Sort” in a spreadsheet - it’s more precise in its meaning, and instructs R to re-arrange the rows of a data frame using the order identified in one or more columns. Try to piece together what this does: opioid_calls %&gt;% select (dow, narcan, age, gender, asu_yn) %&gt;% filter (dow %in% c(&quot;(6) Saturday&quot;, &quot;(7) Sunday&quot;) &amp; narcan == &quot;Yes&quot;) %&gt;% arrange ( age ) (Reminder: the c() operator makes a list – it combines the two quoted values into a vector.) 5.5 Traps Case-sensitivity R is always case-sensitive, which means that it makes a difference whether an object, a column name or the value of a variable (like Male) is upper-case, lower-case or some proper case. For example: opioid_calls %&gt;% filter (narcan == &quot;yes&quot;) .. results in 0 cases, because narcan is shown as “Yes”, not as “yes”. Instead, match the case to what you have in your data. Equals versus double-equals You’ll get this weird error if you try to use an equals sign as a comparison operator: filter(opioid_calls, narcan = &quot;Yes&quot;) ## Error: `narcan` (`narcan = &quot;Yes&quot;`) must not be named, do you need `==`? Note that R is guessing that you meant “==” instead. It won’t always be so kind. The “and then” operator (%&gt;%) You also get a weird error if you forget to string together commands with the %&gt;% connector. A code chunk that looks like this: filter (opioid_calls, narcan == &quot;Yes&quot;) arrange (dow) will result in the error that says, Error in arrange(dow) : object &#39;dow&#39; not found It doesn’t make much sense, except it’s telling you that it is no longer finding a field called dow. It’s done the filter and thinks it was finished because there was no AND THEN connector. Then it tries to run another command, but it’s starting from scratch without a data frame to work from. This is really common and a pain. R thought you had TWO things you wanted to do – one is just the filter, the other is an error. The fix is to put the %&gt;% after the filter. The dreaded NA Missing information is recorded in R as NA. The problem is, this isn’t a value at all – it will never match anything, will never be bigger or smaller than anything, and will be ignored if you sort on it. We’ll come back to this, but just remember that it’s a problem. 5.6 Resources 5.6.1 Tutorials “Teaching R” videos. They’re a little more detailed than we need, but it’s a useful review of most of what we’ve done. Andrew Ba Tran’s “Lesson 3: Wrangling data” from the R for Journalists (learn-r) website. You can watch the videos and take the quizzes without following along on your computer. Matt Waite’s chapter on filters – note that it has a verb we haven’t looked at yet, called “mutate” Data School “Faster data maipulation with dplyr”, which is a little more in-depth than we need but is easy to follow. "],
["A02-programming.html", "A A gentle intro to programming A.1 Key takeaways A.2 Building blocks A.3 Make an omelet with a function A.4 Applications A.5 More resources", " A A gentle intro to programming A.1 Key takeaways All programming languages (yes, including Excel) have certain things in common: objects, operators, functions and loops. An algorithm is a set of instructions, carried out in order. No one is born knowing how to code. It takes practice. The examples here are shown mainly using R syntax. Another language might look a little different. A.2 Building blocks Once you learn to program in one language, learning others is much simpler. That’s because you have the basic concepts down: How to assign values to variables, how to loop through lists, or how to import data. This chapter walks through some of the more universal concepts in programming. Variables and objects Objects can be simple, like a variable called my_name that holds the value, “Sarah”. Or they can be quite complex, such as a multi-level data frame containing details from a Spotify playlist. Literals The most basic kind of object is a single variable that contains a single value of a specific type: my_name &lt;- &quot;Sarah&quot; my_value &lt;- 1.0 These are called “literals”, which usually include text, numeric, logical (usually true/false but sometimes yes/no or 1/0) and date or date/time. (Return to our tutorial on data types if you need a refresher.) 1 Lists / arrays / vectors Most languages have some concept of a list of items called an array, vector or dictionary. In R, you create a vector using the “c” operator, short for “combine”. Python uses a square bracket to indicate a list. Once you have your items in a list or a vector, you can apply the same function across all of them or work on them in order. my_list &lt;- c(1, 2, 3, 4, 5) creates a vector of the values 1 through 5 in R my_list = [1, 2, 3, 4, 5] creates a list of values 1 through 5 in Python Data frames or tables Data frames or data tables are really a special version of a list, and are equivalent to a tidy Excel spreadsheet: rectangular data with field names and observations. You don’t need to know much about this yet, but just understand that it will become an important part of your vocabulary. Operators &amp; assignment Operators are simple aritmetic or similar operations, like adding, subtracting, dividing and multiplying. Arithmethic: add (+), subtract (-), multiply (*), or divide (/). Text: Smush together phrases by concatenating (often + or &amp;) Comparison: Greater than (&gt;) , less than (&lt;), equal to (often == to distinguish from =), not equal to (often !=). “Assignment” means pushing a value into a var iable name using either “=” or “&lt;-”. It’s amazing how many different ways there are to think of this. Some might call “naming a value”, others might consider it “setting a variable”. (A variable is just a name you’ll use later on to refer to your value. It can vary, depending on what you do to it.) my_name &lt;- &quot;Sarah&quot; my_value = 1.0 Functions A function is a set of instructions that is either built into the programming language, is added through a package or library, or is created by you. You can save them for later use or apply them on the fly. Usually, you write the name of the function, then put its arguments inside parentheses. You did this in Excel: =SUM(A1:A15) Generally, there are categories of functions that depend on what data type they act on. An example in R is the function tolower(), which converts anything inside the parentheses to lower case. There can be several different pieces of information in a function. There can also be optional arguments. A maddening example in R is: sum ( variable_name ) This adds the values of a variable. BUT it will come out to NA if you try to include a row that was NA to begin with. Instead, you have to provide an optional arbument to get rid of NA’s before starting: sum (variable_name, na.rm=TRUE) Loops A loop is a way to repeat your instructions over and over without having to re-write them every time. They usually work by stepping through some kind of a list, like a directory of files, or by using a counter, such as every year between 2005 and 2018. Excel and Google Sheets don’t really have loops, unless you learn the more complicated programming language behind them. This is why many people move to Python and R – to get the power of loops. A.3 Make an omelet with a function Ingredients by Katie Smith via Unsplash Suppose you want to make an omelet. Before you even start, you need to know at least two things: which ingredients you have on hand, and what kind of omelet you want to make. A function that creates an omelet might look something like this. The first row creates a function called make_omelet, which requires the two pieces of information as arguments. Once you’ve made the function, you can refer to that set of instruction by its name by giving it the arguments it needs. function make_omelet (ingredients_on_hand, what_kind) { check for necessary ingredients (are all elements of what_kind in ingredients_on_hand?) quit now if you don&#39;t have them all. return the error message prepare the ingredients for (which_kind) whisk the eggs melt some butter in a pan pour in the eggs add ingredients for what_kind except cheese (what_kind - &quot;cheese&quot;) flip the omelet if you have cheese in both what_kind and ingredients_on_hand , fold in cheese remove from pan return the omelet } Now, when you want to make an omelet, you can just make your list of ingredients and the kind of omelet you want, and execute the function: Let’s start with setting up those items: ingredients &lt;- c(&quot;butter&quot;, &quot;eggs&quot;, &quot;cheese&quot;, &quot;spinach&quot;, &quot;tomatoes&quot;) kind &lt;- c(&quot;spinach&quot;, &quot;cheese&quot;) make_omelet (ingredients, kind) (Note that what you give it doesn&#39;t have to have the same name that it had in your definition.) Open a restaurant with loops Now, you’d have to repeat this over and over if you had a restaurant. It might look like this: make_omelet (ingredients,kind) ** change the ingredients and the kind** make_omelet (ingredients2, kind2) ** change the ingredients ant the kind** make_omelet (ingredients3, kind3) ... and so on. You’d have a program hundreds of lines long – one for each customer. Instead, you could loop through the customers and do the same thing: customers &lt;- c(&quot;Bob&quot;, &quot;Jon&quot;, &quot;Christie&quot;, &quot;Lauren&quot;) for (c in customers) { request what kind they want make_omelet (kind, ingredients_on_hand) give omelet to customer c update your ingredients list if you ran out of something or went shopping } A.4 Applications Many of the functions we use are already built into R and Python, or are in libraries that we borrow – someone else has already written them for you. Examples include: reading a csv or Excel file calculating the average or sum counting finding phrases within text The more common applications are things we haven’t done yet: Gather identical spreadsheets into one dataset, as in this example using refugee statistics. Loop through a list of links, download a page, then scrape it to extract information. Here’s an example from the Maricopa County sheriff’s department mugshots. (It won’t work – the census changes each time, so the ID numbers are out of date.) A.5 More resources The Data types and tidy data section of our Excel training. \"Beyond Binary, Lesson 1 from a Google engineer’s drag queen persona named Anna Lytical. This video gives you a good handle on what a computer program does. There are two special types that we’ll deal with later, but can cause a lot of headaches: NA values and factors. You don’t have to deal with them yet.↩ "],
["A01-resources.html", "B Great R Resources B.1 Key takeaways B.2 Coursework in R B.3 Instructional screencasts and videos", " B Great R Resources B.1 Key takeaways If this set of resources doesn’t fit your learning style, there are lots of others that might In our class, we are working almost entirely in the “tidyverse”, and in R Markdown documents. Some of the resources you’ll find elsewhere might not. B.2 Coursework in R Other professors and universities are also trying to teach R in journalism and other classes. Here are a few that have particularly rich materials for their students: Jesse Lecy’s “Introduction to data science for the social sector,” an ASU course that teaches R in the context of non-profit management. His site, https://ds4ps.org/cpp-526-fall-2019/ has a custom-made textbook that covers much of the same material as us. Matt Waite at the University of Nebraska has been teach R in the context of a sports journalism class. His textbook also has great resources and approaches to learning. One minor difference that might trip you up: We’re using R Markdown, and he’s using R Notebooks. They’re very similar, but the “knit” option isn’t there when you use Notebooks – only a “Preview”. You’ll know what that means when we get moving. B.3 Instructional screencasts and videos Andrew Ba Tran’s R for Journalists course, originall created for a MOOC offered by the Knight Center for the Americas. Previous Cronkite students say that it goes a little fast for someone with no experience in other lanugages, but it has most of what you’d need. Ben Stenhaug, a Data Science for Social Good fellow at Stanford, has put together some screencasts and exercises called teachR on starting out in R and the tidyverse. “Tidy Tuesday” screencasts from David Robinson, an example using fivethirtyeight.com data on education and salaries. These are very long – up to an hour – but they walk through what it’s really like to take a dataset from scratch and try to find something interesting. I disagree with one thing he does though – I believe you should read the documentation FIRST, not after you’ve done a lot of guessing about what columns mean. Sharon Machliss’ “Do More with R” YouTube series. These are fairly advanced single-topic, short videos. "]
]
